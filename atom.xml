<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog of Faradays&#39; Studio</title>
  
  <subtitle>照见五蕴皆空，度一切苦厄。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://faradays-studio.gitee.io/"/>
  <updated>2021-10-01T02:16:44.502Z</updated>
  <id>https://faradays-studio.gitee.io/</id>
  
  <author>
    <name>David</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一种软件著作权代码合并的批处理脚本</title>
    <link href="https://faradays-studio.gitee.io/202110011009/"/>
    <id>https://faradays-studio.gitee.io/202110011009/</id>
    <published>2021-10-01T02:09:39.000Z</published>
    <updated>2021-10-01T02:16:44.502Z</updated>
    
    <content type="html"><![CDATA[<p>最近在忙着工作上的事情，很长一段时间没有写过文章了。前几周申请了一项软件著作权，涉及到代码需要合并的事情，要求前1500行 + 后1500行组成鉴定材料。因此我花了一点时间写了一个批处理的脚本，如下：</p><pre><code class="bat">REM 指定需要处理的文件类型set /p file_filter=&quot;输入代码文件扩展名，空格分隔，如 *.aspx *.cs *.js *.css *.master *.config *.asax &quot;IF not defined file_filter set file_filter=*.aspx *.cs hhj.js *.masterREM 指定输出文件SET current_date=%date:~0,4%%date:~5,2%%date:~8,2%_%time:~0,2%%time:~3,2%%time:~6,2%    :: 0 点是出现兼容性问题（时的第一位不会补零）    SET current_date=%date:~0,4%%date:~5,2%%date:~8,2%.%time:~3,2%%time:~6,2%set output_file=_codes-%current_date%-%computername%.txtset file_list=_files-%current_date%-%computername%.txtREM 指定代码目录，并切换过去（使用 /d 参数）set /p src_dir=&quot;输入代码根目录，如 I:\VirtualBox\vb_share\WebSites\Sis-1.0 ：&quot;    :: 设定初始值，不能带双引号    IF &quot;%src_dir%&quot;==&quot;&quot; set src_dir=I:\VirtualBox\vb_share\WebSites\Sis-1.0:: 跨驱动器切换路径cd /d &quot;%src_dir%&quot;REM 先清空文件，然后后将代码目录中的所有相关文件导入:: 首个代码文件set /p first_file=&quot;输入首个代码文件的相对路径，不区分大小写（如 Default.aspx ）： &quot;    :: 设定初始值，不能带双引号    IF &quot;%first_file%&quot;==&quot;&quot; set first_file=Default.aspx:: 添加根目录set first_file=%src_dir%\%first_file%    :: 不需要双引号扩住，否则会原样输出双引号；末尾也不能添加空格，否则也原样输出    echo %first_file% &gt; %file_list%    :: 将首个代码文件内容添加到目标文件中    echo.&gt; %output_file%type %first_file%&gt;&gt; %output_file%:: 合并当前路径中的代码for /F %%i in (&#39;dir /b/s/a:-d %file_filter%&#39;) do (    :: 追加代码文本内容（比较可以使用 equ 或 == 符号，i 参数表示不区分大小写）    IF /i &quot;%%i&quot;==&quot;%first_file%&quot; (        :: 首个代码文件（切记，括号中不允许只有一个语句、且不支持使用语句与注释交差，即只能第一行为注释！）        echo.&gt;&gt; %output_file%        echo.&gt;&gt; %output_file%        echo.&gt;&gt; %file_list%    ) ELSE (        :: 写入文件清单        echo %%i&gt;&gt; %file_list%        :: 其他代码文件        echo.&gt;&gt; %output_file%        type %%i &gt;&gt; %output_file%    ))echo finish！REM 打开目标文件夹，以便直接拷贝合成文本start explorer %src_dir%::pause</code></pre><p>上述代码是按 ASP.NET 来选择代码文件的，在实际应用时 file_filter 的具体值应该根据你的代码文件的扩展名来设定。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在忙着工作上的事情，很长一段时间没有写过文章了。前几周申请了一项软件著作权，涉及到代码需要合并的事情，要求前1500行 + 后1500行组成鉴定材料。因此我花了一点时间写了一个批处理的脚本，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bat&quot;&gt;REM 指定需要处
      
    
    </summary>
    
    
      <category term="电脑爱好者" scheme="https://faradays-studio.gitee.io/categories/%E7%94%B5%E8%84%91%E7%88%B1%E5%A5%BD%E8%80%85/"/>
    
    
      <category term="Windows" scheme="https://faradays-studio.gitee.io/tags/Windows/"/>
    
      <category term="批处理" scheme="https://faradays-studio.gitee.io/tags/%E6%89%B9%E5%A4%84%E7%90%86/"/>
    
      <category term="bat" scheme="https://faradays-studio.gitee.io/tags/bat/"/>
    
      <category term="脚本" scheme="https://faradays-studio.gitee.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
      <category term="软著" scheme="https://faradays-studio.gitee.io/tags/%E8%BD%AF%E8%91%97/"/>
    
      <category term="代码" scheme="https://faradays-studio.gitee.io/tags/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Solaris 远程访问 IP 限制方法</title>
    <link href="https://faradays-studio.gitee.io/202108251958/"/>
    <id>https://faradays-studio.gitee.io/202108251958/</id>
    <published>2021-08-25T11:58:25.000Z</published>
    <updated>2021-10-01T02:08:41.502Z</updated>
    
    <content type="html"><![CDATA[<p>本来想在网上找一个可以限制远程 IP 访问的脚本，结果一个都不能用；因此，花了几天一边改脚本，一边看 Oracle 的官网手册，最后测试通过了！</p><pre><code class="sh">#!/usr/bin/bash# 执行  bash /etc/block_ssh.sh## TO-DO## 1.0.1        8/19 21:49## 1.0.0   2021/08/01 22:24:48-2021/08/01 22:37:30#       根据 /etc/block_ssh.csh 改编，相应日志文件为#           tail -f /var/adm/messages#           tail -f  /var/log/alarm_`hostname`.log#           tail -f  /usr/tmp/remote.log# 获取 tty 值tmn=`who am i | awk &#39;&#123;print $2;&#125;&#39;`# 获取当前 IP# who am i| awk &#39;&#123;print $2,$6;&#125;&#39;#login_ip=`finger |grep $tmn | awk &#39;&#123;print $6;&#125;&#39;`login_ip=` who -um | awk &#39;&#123;print $8;&#125;&#39; | sed -e &#39;s/(//g; s/)//g&#39; `# bash 去除前缀 $&#123;login_ip#*(&#125; 和后缀 $&#123;login_ip%*)&#125;echo $login_ip# 获取当前 PID 值login_pid=`who -um | awk &#39;&#123;print $7;&#125;&#39;`login_name=`echo $LOGNAME`if [ &quot;$login_ip&quot; = &quot;&quot; -o &quot;$login_ip&quot; = &quot;:0&quot; -o &quot;$login_ip&quot; = &quot;:0.0&quot; ]; then    type_x=&quot;local&quot;else    type_x=&quot;remote&quot;fi# chmod 622 /usr/tmp/remote.logecho -e &quot;`date +%Y-%m-%d\ %H:%M:%S` \t $login_name \t $login_ip&quot; &gt;&gt; /usr/tmp/remote.logecho $type_xtrap 1 2 3 9 15if [ &quot;$type_x&quot; = &quot;local&quot; -o &quot;$login_ip&quot; = &quot;10.0.2.2&quot; ]; then    echo &quot;   Welcome......&quot;    logger -p user.info  &quot;Someone has logined in: $login_ip \!&quot;else    echo &quot;   Warning&quot;    # 需要转义：英文叹号    logger -i -p user.err -t SSH &quot;Remote IP is login: $login_ip \!&quot;    logger -ip user.alert &quot;Unauthorized remote IP is login: $login_ip \!&quot;    #logger -p user.warning  &#39;Unknown IP is login&#39;    # 测试表明，上述报警同时在 系统日志和用户日志中存储    # kill remote ssh link    pkill -9 -t $tmn    #kill -9 $login_pidfi</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本来想在网上找一个可以限制远程 IP 访问的脚本，结果一个都不能用；因此，花了几天一边改脚本，一边看 Oracle 的官网手册，最后测试通过了！&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;#!/usr/bin/bash

# 执行  bash /etc/block
      
    
    </summary>
    
    
      <category term="电脑爱好者" scheme="https://faradays-studio.gitee.io/categories/%E7%94%B5%E8%84%91%E7%88%B1%E5%A5%BD%E8%80%85/"/>
    
    
      <category term="Linux" scheme="https://faradays-studio.gitee.io/tags/Linux/"/>
    
      <category term="Solaris" scheme="https://faradays-studio.gitee.io/tags/Solaris/"/>
    
      <category term="IP" scheme="https://faradays-studio.gitee.io/tags/IP/"/>
    
      <category term="远程" scheme="https://faradays-studio.gitee.io/tags/%E8%BF%9C%E7%A8%8B/"/>
    
      <category term="限制" scheme="https://faradays-studio.gitee.io/tags/%E9%99%90%E5%88%B6/"/>
    
      <category term="Bash" scheme="https://faradays-studio.gitee.io/tags/Bash/"/>
    
  </entry>
  
  <entry>
    <title>中国专利信息的查询方法</title>
    <link href="https://faradays-studio.gitee.io/202108082250/"/>
    <id>https://faradays-studio.gitee.io/202108082250/</id>
    <published>2021-08-08T14:50:18.000Z</published>
    <updated>2021-08-27T13:15:16.490Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近，由于工作的需要，委托代理公司开展专利申报工作；可是又很关心专利申报流程执行得怎么样了，因此就学习一下如何查询专利。</p></blockquote><ol><li><p>首先，在 <a href="http://cpquery.cnipa.gov.cn/">http://cpquery.cnipa.gov.cn/</a> 网站上注册一个账户（注册公众查询账户就行；我考虑到以后工作的需要，申请了电子申请账户，它也具有公众查询功能）</p><p> <img src="/static/img/20210827-%E4%B8%93%E5%88%A9/CHIPA-%E4%B8%93%E5%88%A9%E5%AE%A1%E6%9F%A5%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2%E7%B3%BB%E7%BB%9F-%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2.png" alt="专利查询系统的登录界面"></p></li><li><p>登陆系统后，输入相关信息就可以查询专利喽！（当然，系统很奇葩，专利号中的点号需要删除；如 <code>202110465388.2</code> 的查询值为 <code>2021104653882</code> ）</p><p> <img src="/static/img/20210827-%E4%B8%93%E5%88%A9/CHIPA-%E4%B8%93%E5%88%A9%E6%A3%80%E7%B4%A2-1-%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%E8%BE%93%E5%85%A5.png" alt="专利查询系统的查询内容输入"></p><p> <img src="/static/img/20210827-%E4%B8%93%E5%88%A9/CHIPA-%E4%B8%93%E5%88%A9%E6%A3%80%E7%B4%A2-2-%E7%94%B3%E8%AF%B7%E5%86%85%E5%AE%B9%E8%AF%A6%E6%83%85.png" alt="专利查询系统的专利详情示意"></p></li></ol><blockquote><ul><li>上述系统也可以申请专利，不过很多单位都是委托第三方去处理，也许流程太复杂了吧。</li></ul></blockquote><blockquote><ul><li>从专利检索的角度来说，使用 <a href="http://www.soopat.com/Home/Index">http://www.soopat.com/Home/Index</a> 来检索更为便利一些，毕竟，很多时候，你不知道你要找到的是什么专利！</li></ul></blockquote><blockquote><p>   <img src="/static/img/20210827-%E4%B8%93%E5%88%A9/soopat-%E4%B8%93%E5%88%A9%E6%A3%80%E7%B4%A2%EF%BC%88%E7%A4%BA%E4%BE%8B%EF%BC%89.png" alt="soopat专利查询系统"></p></blockquote><blockquote><ul><li>悄悄地告诉你，如果需要下载专利，可以从这里下载 <a href="https://www.drugfuture.com/cnpat/cn_patent.asp">https://www.drugfuture.com/cnpat/cn_patent.asp</a> 或者 <a href="https://www.patent9.com/">https://www.patent9.com/</a> 。</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近，由于工作的需要，委托代理公司开展专利申报工作；可是又很关心专利申报流程执行得怎么样了，因此就学习一下如何查询专利。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先，在 &lt;a href=&quot;http://cpquery.cnip
      
    
    </summary>
    
    
      <category term="办事指南" scheme="https://faradays-studio.gitee.io/categories/%E5%8A%9E%E4%BA%8B%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="专利" scheme="https://faradays-studio.gitee.io/tags/%E4%B8%93%E5%88%A9/"/>
    
      <category term="查询" scheme="https://faradays-studio.gitee.io/tags/%E6%9F%A5%E8%AF%A2/"/>
    
      <category term="方法" scheme="https://faradays-studio.gitee.io/tags/%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>google-authenticator 双因子验证</title>
    <link href="https://faradays-studio.gitee.io/202107312039/"/>
    <id>https://faradays-studio.gitee.io/202107312039/</id>
    <published>2021-07-31T12:39:26.000Z</published>
    <updated>2021-07-31T14:51:50.330Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>日常工作中，经常有人问系统开启双因子验证没有；奈何人穷志短，从网上看到 google-authenticator 支持免费的双因子验证，只要电脑端安装和配置 google-authenticator，就可以通过手机端安装的 Google 身份验证器提供相应的验证码来校验登录访问行为。</p></blockquote><h3 id="程序安装"><a href="#程序安装" class="headerlink" title="程序安装"></a>程序安装</h3><pre><code class="sh">  yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm  yum list google-auth*  yum -y install google-authenticator  vim /etc/pam.d/sshd      # auth        required    pam_sepermit.so      auth required pam_google_authenticator.so  vim /etc/ssh/sshd_config      ChallengeResponseAuthentication yes      # ChallengeResponseAuthentication no      UsePAM yes      AuthenticationMethods publickey,password publickey,keyboard-interactive</code></pre><h3 id="账户验证码功能的配置"><a href="#账户验证码功能的配置" class="headerlink" title="账户验证码功能的配置"></a>账户验证码功能的配置</h3><ol><li><p>生成 root 账户验证码</p><pre><code class="sh">[root@hhjos6 herc]# google-authenticator</code></pre><blockquote><p>  <a href="https://www.google.com/chart?chs=200x200&amp;chld=M|0&amp;cht=qr&amp;chl=otpauth://totp/root@hhjos6%3Fsecret%3D">https://www.google.com/chart?chs=200x200&amp;chld=M|0&amp;cht=qr&amp;chl=otpauth://totp/root@hhjos6%3Fsecret%3D</a>…<br>  Your new secret key is:<br>  此处省略若干字符<br>  Do you want me to update your “~/.google_authenticator” file (y/n) <strong>y</strong></p><p>  Do you want to disallow multiple uses of the same authentication<br>  token? This restricts you to one login about every 30s, but it increases<br>  your chances to notice or even prevent man-in-the-middle attacks (y/n) <strong>y</strong></p><p>  By default, tokens are good for 30 seconds and in order to compensate for<br>  possible time-skew between the client and the server, we allow an extra<br>  token before and after the current time. If you experience problems with poor<br>  time synchronization, you can increase the window from its default<br>  size of 1:30min to about 4min. Do you want to do so (y/n) <strong>y</strong></p><p>  If the computer that you are logging into isn’t hardened against brute-force<br>  login attempts, you can enable rate-limiting for the authentication module.<br>  By default, this limits attackers to no more than 3 login attempts every 30s.<br>  Do you want to enable rate-limiting (y/n) <strong>y</strong><br>  [root@hhjos6 herc]# </p></blockquote></li><li><p>生成 herc 账户验证码</p><blockquote><p>  hhjos6:/home/herc&gt; <strong>google-authenticator</strong><br>  <a href="https://www.google.com/chart?chs=200x200&amp;chld=M|0&amp;cht=qr&amp;chl=otpauth://totp/herc@hhjos6%3Fsecret%">https://www.google.com/chart?chs=200x200&amp;chld=M|0&amp;cht=qr&amp;chl=otpauth://totp/herc@hhjos6%3Fsecret%</a>…<br>  Your new secret key is:<br>  此处省略若干字符<br>  ​       Do you want me to update your “/home/username/.google_authenticator” file (y/n) <strong>y</strong><br>  ​       (是否重新生成登录配置文件？)</p><p>  ​       Do you want to disallow multiple uses of the same authentication<br>  ​       token? This restricts you to one login about every 30s, but it increases<br>  ​       your chances to notice or even prevent man-in-the-middle attacks (y/n) <strong>y</strong><br>  ​       (是否拒绝多次重复使用相同的令牌？这将限制你每30s仅能登录一次，但会提醒/阻止中间人攻击。)<br>  ​<br>  ​       By default, tokens are good for 30 seconds and in order to compensate for<br>  ​       possible time-skew between the client and the server, we allow an extra<br>  ​       token before and after the current time. If you experience problems with poor<br>  ​       time synchronization, you can increase the window from its default<br>  ​       size of 1:30min to about 4min. Do you want to do so (y/n) <strong>n</strong><br>  ​       (是否将窗口时间由1分30秒增加到约4分钟？这将缓解时间同步问题。)<br>  ​<br>  ​       If the computer that you are logging into is not hardened against brute-force<br>  ​       login attempts, you can enable rate-limiting for the authentication module.<br>  ​       By default, this limits attackers to no more than 3 login attempts every 30s.<br>  ​       Do you want to enable rate-limiting (y/n) <strong>y</strong><br>  ​       (是否启用此模块的登录频率限制，登录者将会被限制为最多在30秒内登录3次。)<br>  ​    hhjos6:/home/herc&gt; </p></blockquote></li><li><p>注意事项</p><ul><li>配置问题排查： <code>tail -40f /var/log/secure</code></li><li>输入android 客户端的验证码（注意控制时间）后，再输入账户密码即可登录。</li></ul></li></ol><h3 id="重启进程生效"><a href="#重启进程生效" class="headerlink" title="重启进程生效"></a>重启进程生效</h3><pre><code class="sh">service sshd restart</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;日常工作中，经常有人问系统开启双因子验证没有；奈何人穷志短，从网上看到 google-authenticator 支持免费的双因子验证，只要电脑端安装和配置 google-authenticator，就可以通过手机端安装的 Google 身份验证器
      
    
    </summary>
    
    
      <category term="电脑爱好者" scheme="https://faradays-studio.gitee.io/categories/%E7%94%B5%E8%84%91%E7%88%B1%E5%A5%BD%E8%80%85/"/>
    
    
      <category term="安装" scheme="https://faradays-studio.gitee.io/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="配置" scheme="https://faradays-studio.gitee.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="authenticator" scheme="https://faradays-studio.gitee.io/tags/authenticator/"/>
    
      <category term="google" scheme="https://faradays-studio.gitee.io/tags/google/"/>
    
      <category term="双因子" scheme="https://faradays-studio.gitee.io/tags/%E5%8F%8C%E5%9B%A0%E5%AD%90/"/>
    
      <category term="网络安全" scheme="https://faradays-studio.gitee.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>tmux 的编译安装</title>
    <link href="https://faradays-studio.gitee.io/202106281924/"/>
    <id>https://faradays-studio.gitee.io/202106281924/</id>
    <published>2021-06-28T11:24:26.000Z</published>
    <updated>2021-06-28T11:26:22.086Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>正常情况下，直接使用 <code>yum install tmux</code> 即可完成安装。</p></li><li><p>安装支持环境</p><pre><code class="shell">yum -y install libtermcap-devel ncurses-devel libevent-devel readline-devel# tmux depends on libevent 2.x(系统安装的版本为 1.4.13)git clone https://gitee.com/mirrors/libevent.gitcd libevent./configuremakemake verify   # (optional)make install</code></pre></li><li><p>下载源码</p><pre><code class="shell">cd /home/commongit clone https://gitee.com/mirrors/tmux.git#git clone https://github.com/tmux/tmux.git</code></pre></li><li><p>编译安装</p><pre><code class="sh">cd tmuxsh autogen.sh./configuremakemake install</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;正常情况下，直接使用 &lt;code&gt;yum install tmux&lt;/code&gt; 即可完成安装。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装支持环境&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;yum -y install libtermcap-
      
    
    </summary>
    
    
      <category term="电脑爱好者" scheme="https://faradays-studio.gitee.io/categories/%E7%94%B5%E8%84%91%E7%88%B1%E5%A5%BD%E8%80%85/"/>
    
    
      <category term="Linux" scheme="https://faradays-studio.gitee.io/tags/Linux/"/>
    
      <category term="安装" scheme="https://faradays-studio.gitee.io/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="编译" scheme="https://faradays-studio.gitee.io/tags/%E7%BC%96%E8%AF%91/"/>
    
      <category term="tmux" scheme="https://faradays-studio.gitee.io/tags/tmux/"/>
    
  </entry>
  
  <entry>
    <title>aria2 的安装与配置</title>
    <link href="https://faradays-studio.gitee.io/202106132011/"/>
    <id>https://faradays-studio.gitee.io/202106132011/</id>
    <published>2021-06-13T12:11:05.000Z</published>
    <updated>2021-06-13T12:13:11.980Z</updated>
    
    <content type="html"><![CDATA[<ol><li>下载（安装 <a href="https://github.com/aria2/aria2">aria2</a> 程序包（下载器）：aria2 is a lightweight multi-protocol &amp; multi-source, cross platform download utility operated in command-line. It supports HTTP/HTTPS, FTP, BitTorrent and Metalink ）</li></ol><pre><code>cd /usr/local/srcgit clone https://gitee.com/mirrors/aria2.git</code></pre><ol start="2"><li>安装 gettext 依赖包（不成功，暂时不开展）</li></ol><pre><code class="sh">sucd /home/commonwget https://mirrors.aliyun.com/gnu/gettext/gettext-0.18.3.2.tar.gztar -zxvf gettext-0.18.3.2.tar.gzcd gettext-0.18.3.2./configuremake -j4    # could not find libjava.so    # Could not find Java SE Runtime Environment.make installln /usr/local/bin/xgettext /bin/xgettextln /usr/local/bin/msguniq /bin/msguniqln /usr/local/bin/msgmerge /bin/msgmerge</code></pre><ol start="3"><li>编译安装</li></ol><pre><code class="sh">autoreconf -i./configure#./configure ARIA2_STATIC=yesmake</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;下载（安装 &lt;a href=&quot;https://github.com/aria2/aria2&quot;&gt;aria2&lt;/a&gt; 程序包（下载器）：aria2 is a lightweight multi-protocol &amp;amp; multi-source, cross p
      
    
    </summary>
    
    
      <category term="电脑爱好者" scheme="https://faradays-studio.gitee.io/categories/%E7%94%B5%E8%84%91%E7%88%B1%E5%A5%BD%E8%80%85/"/>
    
    
      <category term="Linux" scheme="https://faradays-studio.gitee.io/tags/Linux/"/>
    
      <category term="安装" scheme="https://faradays-studio.gitee.io/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="配置" scheme="https://faradays-studio.gitee.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="aria2" scheme="https://faradays-studio.gitee.io/tags/aria2/"/>
    
  </entry>
  
  <entry>
    <title>fzf 的安装与配置</title>
    <link href="https://faradays-studio.gitee.io/202106072338/"/>
    <id>https://faradays-studio.gitee.io/202106072338/</id>
    <published>2021-06-07T15:38:59.000Z</published>
    <updated>2021-06-07T15:46:59.026Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h2><ol><li><p>安装 <strong>fzf</strong>  （<a href="https://github.com/junegunn/fzf，输入模糊的关键词来定位文件或文件；**源代码就是安装程序**，因此需要选择好路径）">https://github.com/junegunn/fzf，输入模糊的关键词来定位文件或文件；**源代码就是安装程序**，因此需要选择好路径）</a></p><pre><code class="sh">sucd /usr/localgit clone --depth 1 https://github.com/junegunn/fzf.git./fzf/install</code></pre></li><li><p>关联系统（默认会自动关联，可以添加到个人自定义的<strong>全局设置</strong>文件 <code>vim /etc/profile.d/hhjos6.sh</code> 中）</p><pre><code class="sh"># fzf    if [[ ! &quot;$PATH&quot; == */usr/local/fzf/bin* ]]; then      export PATH=&quot;$&#123;PATH:+$&#123;PATH&#125;:&#125;/usr/local/fzf/bin&quot;    fi    # Auto-completion[[ $- == *i* ]] &amp;&amp; source &quot;/usr/local/fzf/shell/completion.bash&quot; 2&gt; /dev/null    # Key bindingssource &quot;/usr/local/fzf/shell/key-bindings.bash&quot;</code></pre></li></ol><pre><code># fzf 其实底层是调用的 Unix 系统 `find` 命令，也可以使用 fd 或 ag 来代替# export FZF_DEFAULT_COMMAND=&quot;fd --exclude=&#123;.git,.idea,.vscode,.sass-cache,node_modules,build&#125; --type f&quot;export FZF_DEFAULT_COMMAND=&#39;ag --hidden --ignore .git -l -g &quot;&quot;&#39;# 界面展示export FZF_DEFAULT_OPTS=&quot;--height 30% --layout=reverse --preview &#39;(highlight -O ansi &#123;&#125; || cat &#123;&#125;) 2&gt; /dev/null | head -100&#39;&quot;# 触发命令行补全(默认是 **，一般不用修改)# FZF_COMPLETION_TRIGGER```</code></pre><blockquote><p>更多用法见参考文献。</p></blockquote><ol start="3"><li><p>配置安装高亮插件</p><ul><li>yum install highlight</li></ul></li><li><p>配置到 vim</p><pre><code class="sh"># 裸装cp /usr/local/fzf/plugin/fzf.vim /usr/share/vim/vim74/pluginvim /etc/vimrc    set rtp+=/usr/local/fzf/# 基于 vim-plug 插件系统Plug &#39;/usr/local/fzf/bin/fzf&#39;Plug &#39;/usr/local/fzf/plugin/fzf.vim&#39;</code></pre></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><p>junegunn.<code>fzf - a command-line fuzzy finder</code>[EB/OL].<a href="https://github.com/junegunn/fzf">https://github.com/junegunn/fzf</a>, 2021/03/03.</p></li><li><p>Ein Verne.<code>每天学习一个命令：fzf 使用笔记</code>[EB/OL].<a href="http://einverne.github.io/post/2019/08/fzf-usage.html">http://einverne.github.io/post/2019/08/fzf-usage.html</a>, 2021/03/03.</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装与配置&quot;&gt;&lt;a href=&quot;#安装与配置&quot; class=&quot;headerlink&quot; title=&quot;安装与配置&quot;&gt;&lt;/a&gt;安装与配置&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装 &lt;strong&gt;fzf&lt;/strong&gt;  （&lt;a href=&quot;https://github
      
    
    </summary>
    
    
      <category term="电脑爱好者" scheme="https://faradays-studio.gitee.io/categories/%E7%94%B5%E8%84%91%E7%88%B1%E5%A5%BD%E8%80%85/"/>
    
    
      <category term="Linux" scheme="https://faradays-studio.gitee.io/tags/Linux/"/>
    
      <category term="安装" scheme="https://faradays-studio.gitee.io/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="配置" scheme="https://faradays-studio.gitee.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="fzf" scheme="https://faradays-studio.gitee.io/tags/fzf/"/>
    
  </entry>
  
  <entry>
    <title>ag 的安装与配置</title>
    <link href="https://faradays-studio.gitee.io/202104301929/"/>
    <id>https://faradays-studio.gitee.io/202104301929/</id>
    <published>2021-04-30T11:29:34.000Z</published>
    <updated>2021-04-30T11:31:08.962Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><strong>ag</strong> （<a href="https://github.com/ggreer/the_silver_searcher）比grep、ack更快的递归搜索文件内容（速度对比：`ag`&gt;`ack`&gt;`grep`）">https://github.com/ggreer/the_silver_searcher）比grep、ack更快的递归搜索文件内容（速度对比：`ag`&gt;`ack`&gt;`grep`）</a></p><pre><code class="sh"># centos 6+（epel）yum install the_silver_searcher</code></pre></li><li><p>安装到 vim</p><ul><li><p>安装</p><pre><code class="sh">cd /usr/share/vim/vim74/plugin#cd ~/.vim/plugingit clone https://github.com/rking/ag.vim ag</code></pre></li><li><p>全局配置 <code>vim /etc/vimrc</code></p><pre><code class="sh">&quot; 自动缩进set autoindent&quot; ag 插件（请注意：默认为全局搜索，因此必须指明文件路径，不过支持正则表达式）set runtimepath^=/usr/share/vim/vim74/plugin/ag.vimlet g:ag_prg=&quot;/usr/bin/ag --vimgrep&quot;let g:ag_working_path_mode=&quot;r&quot;</code></pre></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ag&lt;/strong&gt; （&lt;a href=&quot;https://github.com/ggreer/the_silver_searcher）比grep、ack更快的递归搜索文件内容（速度对比：`ag`&amp;gt;`ack`&amp;gt;`grep`）&quot;&gt;
      
    
    </summary>
    
    
      <category term="电脑爱好者" scheme="https://faradays-studio.gitee.io/categories/%E7%94%B5%E8%84%91%E7%88%B1%E5%A5%BD%E8%80%85/"/>
    
    
      <category term="Linux" scheme="https://faradays-studio.gitee.io/tags/Linux/"/>
    
      <category term="安装" scheme="https://faradays-studio.gitee.io/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="配置" scheme="https://faradays-studio.gitee.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="ag" scheme="https://faradays-studio.gitee.io/tags/ag/"/>
    
  </entry>
  
  <entry>
    <title>zsh 环境的安装与配置</title>
    <link href="https://faradays-studio.gitee.io/202104171931/"/>
    <id>https://faradays-studio.gitee.io/202104171931/</id>
    <published>2021-04-17T11:31:02.000Z</published>
    <updated>2021-04-30T11:24:48.101Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>zsh 在 Linux 系统中是自带的，因此不这里并没有讨论 zsh 自身的安装方法，而是 zsh 插件的安装与配置方法。</p></blockquote><h2 id="zsh-的常用快捷键"><a href="#zsh-的常用快捷键" class="headerlink" title="zsh 的常用快捷键"></a>zsh 的常用快捷键</h2><ol><li><p>虽然网络上都宣称 zsh 和 bash 高度解决，不过我个人的理解，bash 的部分快捷键和 csh 倒是比较接近，而 zsh 并不接近。</p><table><thead><tr><th>项目</th><th>zsh</th><th>bash</th><th>备注</th></tr></thead><tbody><tr><td>光标移动到行首</td><td><code>Ctrl</code> + <code>A</code></td><td><code>Home</code></td><td></td></tr><tr><td>光标移动到行尾</td><td><code>Ctrl</code> + <code>E</code></td><td><code>End</code></td><td></td></tr><tr><td>光标后的字符串变为大写</td><td><code>Alt</code> + <code>U</code></td><td></td><td></td></tr><tr><td>当前字符串大写</td><td><code>Alt</code> + <code>C</code></td><td></td><td></td></tr><tr><td>光标后的字符串变为小写</td><td><code>Alt</code> + <code>L</code></td><td></td><td></td></tr><tr><td>删除光标<strong>后</strong>的<strong>所有</strong>字符</td><td><code>Clt</code> + <code>K</code></td><td></td><td></td></tr><tr><td>删除光标<strong>前</strong>的<strong>所有</strong>字符</td><td><code>Clt</code> + <code>H</code></td><td><code>Clt</code> + <code>U</code></td><td><code>Ctrl</code> + <code>U</code> 对 bash 来说是删除光标前的字符，而 zsh 是整行删除。</td></tr><tr><td>删除光标<strong>前</strong>的<strong>一个单词</strong></td><td><code>Ctrl</code> + <code>W</code></td><td></td><td></td></tr><tr><td>删除光标<strong>后</strong>的<strong>一个单词</strong></td><td><code>Alt</code> + <code>D</code></td><td></td><td></td></tr><tr><td>删除光标<strong>当前</strong>的<strong>一个字符</strong></td><td><code>Ctrl</code> + <code>D</code></td><td></td><td></td></tr></tbody></table></li><li><p><strong><code>CTRL + R</code></strong>: 搜索历史</p></li></ol><h2 id="插件的安装与配置"><a href="#插件的安装与配置" class="headerlink" title="插件的安装与配置"></a>插件的安装与配置</h2><ol><li><p>安装 <a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a> 语法提示插件（当用户输入正确命令时指令会绿色高亮，错误时命令红色高亮）</p><pre><code class="sh">su - herccd ~/.zshgit clone git://github.com/zsh-users/zsh-syntax-highlighting.gitvim .zshrc    source /home/herc/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</code></pre></li><li><p>安装 <strong><a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions</a></strong> 命令历史自动提示插件</p><pre><code class="sh">zshsu - herccd ~/.zshmkdir .zshcd .zshbash --versionzsh --versiongit clone https://github.com/zsh-users/zsh-autosuggestionssource zsh-autosuggestions/zsh-autosuggestions.zsh    #完成该步骤后，即可对历史输入命令进行自动语法提示。    # 如果存在过多参数时，仍然可以使用 tab 强制提示。    # 系统内置的命令，如 tar 不能提示参数，不过 yum 可以提示参数、ls 需要强制 tab 才能提示参数</code></pre></li><li><p>安装 incr 系统目录自动提示插件</p><pre><code class="sh">su - herccd ~/.zshwget https://mimosa-pudica.net/src/incr-0.2.zshsource incr*.zsh    # 当前有效，配置到~/.zshrc则用户一直有效（ 使用时将自动以绿色表示提示词）    # 不过按回车就会输入绿色部分，网友说可以使用空格隔断或 delete 键删除，测试无效；建议使用 Ctrl + K 删除末尾后回车！</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;zsh 在 Linux 系统中是自带的，因此不这里并没有讨论 zsh 自身的安装方法，而是 zsh 插件的安装与配置方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;zsh-的常用快捷键&quot;&gt;&lt;a href=&quot;#zsh-的常用快捷键&quot; cl
      
    
    </summary>
    
    
      <category term="电脑爱好者" scheme="https://faradays-studio.gitee.io/categories/%E7%94%B5%E8%84%91%E7%88%B1%E5%A5%BD%E8%80%85/"/>
    
    
      <category term="Linux" scheme="https://faradays-studio.gitee.io/tags/Linux/"/>
    
      <category term="安装" scheme="https://faradays-studio.gitee.io/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="配置" scheme="https://faradays-studio.gitee.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="zsh" scheme="https://faradays-studio.gitee.io/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>Powerline 插件的安装与配置</title>
    <link href="https://faradays-studio.gitee.io/202104102207/"/>
    <id>https://faradays-studio.gitee.io/202104102207/</id>
    <published>2021-04-10T14:07:19.000Z</published>
    <updated>2021-04-17T11:31:26.493Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Powerline-的安装"><a href="#Powerline-的安装" class="headerlink" title="Powerline 的安装"></a>Powerline 的安装</h2><ol><li><p>安装 <a href="https://github.com/powerline/powerline">Powerline</a></p><blockquote><p>  Powerline is a statusline plugin for vim, and provides statuslines and prompts for several other applications, including zsh, bash, fish, tmux, IPython, Awesome, i3 and Qtile.  </p><p>  进阶版本：<a href="https://github.com/b-ryan/powerline-shell">https://github.com/b-ryan/powerline-shell</a>  A beautiful and useful prompt generator for Bash, ZSH, Fish, and tcsh</p></blockquote><pre><code class="sh">pip3 install wheel powerline-status    #或 pip3 install git+git://github.com/powerline/powerline    # pip3 install git+git://gitee.com/mirrors/Powerline# 确认包路径pip3 show powerline-status    # /usr/local/python3/lib/python3.8/site-packages# 查看支持的终端ls /usr/local/python3/lib/python3.8/site-packages/powerline/bindings/    # awesome  bar  bash  config.py  fish  i3  ipython  lemonbar  pdb  qtile  rc  shell  tcsh  tmux  vim  wm  zsh# 查看本地配置gedit /usr/local/python3/lib/python3.8/site-packages/powerline/config_files/config.json</code></pre></li><li><p>安装配套字体，并修改终端界面的显示字体（才会生效）</p><pre><code class="sh">#git clone https://github.com/powerline/fonts.git --depth=1git clone https://gitee.com/efluent/fonts.git --depth=1# installcd fonts./install.sh    # 在相应的账户下安装，就安装到响应账户的文件夹中    /root/.local/share/fonts    /home/herc/.local/share/fontscp -pr fonts/ /usr/share/fonts/powerlinecd ..rm -rf fonts</code></pre><ul><li><p>以下方法测试未成功，原因不明</p><pre><code class="sh">#安装字体# cd /usr/share/fonts/SourceCodePro# chmod +x *.otfcp -pr SourceCodePro/ /usr/share/fontscd /usr/share/fontswget https://github.com/powerline/powerline/blob/develop/font/PowerlineSymbols.otfchmod +x PowerlineSymbols.otf# 下述方法无效#cd /etc/fonts/conf.d/#wget https://github.com/powerline/powerline/blob/develop/font/10-powerline-symbols.conf#wget https://github.com/justrajdeep/fonts/blob/master/10-powerline-symbols.confmkdir -p ~/.config/fontconfig/conf.dcd ~/.config/fontconfig/conf.dwget https://github.com/powerline/fonts/blob/master/fontconfig/50-enable-terminess-powerline.conf# 在各个用户下执行fc-cache -fv</code></pre></li><li><p>查看字体</p><pre><code class="sh"># 查看中文字体清单fc-list :lang=zh# 终端字体保存在find / -name  consolefontscd /lib/kbd/consolefontssetfont -h</code></pre></li><li><p>centos 6安装中文字体（不含文泉驿）</p><pre><code class="sh">yum install bitmap-fonts bitmap-fonts-cjk</code></pre></li></ul></li></ol><h2 id="Powerline-的配置"><a href="#Powerline-的配置" class="headerlink" title="Powerline 的配置"></a>Powerline 的配置</h2><ol><li><p>确认 Python 已关联到系统的各个 shell</p><pre><code class="sh"> # 添加到 Python 程序到系统中 #ln -s /usr/local/python3/bin/powerline /usr/local/bin #ln -s /usr/local/python3/bin/powerline-config /usr/local/bin #ln -s /usr/local/python3/bin/powerline-daemon /usr/local/bin echo &#39;export PATH=$PATH:/usr/local/python3/bin&#39; &gt;&gt; /etc/profile echo &#39;export PATH=$PATH:/usr/local/python3/bin&#39; &gt;&gt; /etc/zprofile</code></pre></li><li><p>bash开启 powerline（全局），参考 <a href="https://powerline.readthedocs.io/en/latest/usage/shell-prompts.html">https://powerline.readthedocs.io/en/latest/usage/shell-prompts.html</a></p><pre><code class="sh"> cd /usr/local/python3/lib/python3.8/site-packages/powerline gedit /etc/bashrc # 或 gedit /etc/profile.d/powerline.sh     # powerline，hhj-20210220     export PATH=$PATH:/usr/local/python3/bin     if [ -f &quot;`which powerline-daemon`&quot; ]; then       powerline-daemon -q       POWERLINE_BASH_CONTINUATION=1       POWERLINE_BASH_SELECT=1       . /usr/local/python3/lib/python3.8/site-packages/powerline/bindings/bash/powerline.sh     fi  . /etc/profile.d/powerline.sh     # 当前用户生效</code></pre></li><li><p>zsh 配置 powerline（全局）</p><pre><code class="sh"> cd /usr/local/python3/lib/python3.8/site-packages/powerline/bindings/zsh/ cp /etc/profile.d/powerline.sh /etc/profile.d/powerline.zsh gedit /etc/profile.d/powerline.zsh     # hhj-20210220     if [ -f &quot;`which powerline-daemon`&quot; ]; then       powerline-daemon -q       POWERLINE_BASH_CONTINUATION=1       POWERLINE_BASH_SELECT=1       . /usr/local/python3/lib/python3.8/site-packages/powerline/bindings/zsh/powerline.zsh     fi  . /etc/profile.d/powerline.zsh</code></pre></li><li><p>vim（全局配置）</p><pre><code class="sh"> vim /etc/vimrc     &quot; hhj-20210220     set  rtp+=/usr/local/python3/lib/python3.8/site-packages/powerline/bindings/vim/     set laststatus=2     set t_Co=256</code></pre></li><li><p>ipython 配置</p><pre><code class="sh"> gedit ~/.ipython/profile_default/ipython_config.py     from powerline.bindings.ipython.since_5 import PowerlinePrompts     c = get_config()     c.TerminalInteractiveShell.simple_prompt = False     c.TerminalInteractiveShell.prompts_class = PowerlinePrompts</code></pre></li><li><p>tmux 配置</p><pre><code class="sh"> gedit ~/.tmux.conf     source &quot;/usr/local/python3/lib/python3.8/site-packages/powerline/bindings/tmux/powerline.conf&quot;</code></pre></li></ol><ul><li><p>解决不能显示git分支问题（未配置）</p><pre><code class="sh">mkdir -p ~/.config/powerlinecat &lt;&lt;-&#39;EOF&#39; &gt; ~/.config/powerline/config.json&#123;    &quot;ext&quot;: &#123;        &quot;shell&quot;: &#123;            &quot;theme&quot;: &quot;default_leftonly&quot;        &#125;    &#125;&#125;EOFpowerline-daemon --replace</code></pre></li></ul><ul><li><p>csh 配置（<strong>不成功</strong>）</p><pre><code class="sh">gedit /etc/zprofile    export PATH=&quot;$PATH:/usr/local/python3/bin&quot;    . /usr/local/python3/lib/python3.8/site-packages/powerline/bindings/tcsh/powerline.tcsh</code></pre></li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>不记得了，之前安装的时候查阅了多个文档，改天补上来了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Powerline-的安装&quot;&gt;&lt;a href=&quot;#Powerline-的安装&quot; class=&quot;headerlink&quot; title=&quot;Powerline 的安装&quot;&gt;&lt;/a&gt;Powerline 的安装&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装 &lt;a href=&quot;https
      
    
    </summary>
    
    
    
      <category term="电脑爱好者" scheme="https://faradays-studio.gitee.io/tags/%E7%94%B5%E8%84%91%E7%88%B1%E5%A5%BD%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 6 编译安装 Python 3</title>
    <link href="https://faradays-studio.gitee.io/202103291935/"/>
    <id>https://faradays-studio.gitee.io/202103291935/</id>
    <published>2021-03-29T11:35:26.000Z</published>
    <updated>2021-04-10T14:13:44.441Z</updated>
    
    <content type="html"><![CDATA[<h2 id="依赖包的安装"><a href="#依赖包的安装" class="headerlink" title="依赖包的安装"></a>依赖包的安装</h2><ol><li>编译环境的安装（centos6 默认已具备）</li></ol><pre><code class="sh">yum -y groupinstall &quot;Development tools&quot;或yum -y install gcc gcc-c++ zlib zlib-devel    gcc-4.4.7-23    gcc-c++-4.4.7-23    zlib-devel-1.2.3-29yum install -y openssl-develyum install -y libffi-develyum install gcc gcc-c++ glibc-static</code></pre><ol start="2"><li>编译安装 openssl </li></ol><pre><code class="sh">wget http://www.openssl.org/source/openssl-1.1.1.tar.gztar -zxvf openssl-1.1.1.tar.gzcd openssl-1.1.1whereis openssl    # 系统自带版本为 1.0.1e-fips    # [root@hhjos6 lib]# whereis openssl    # openssl: /usr/bin/openssl /usr/lib64/openssl /usr/include/openssl /usr/local/openssl /usr/share/man/man1/openssl.1ssl.gzmkdir /usr/local/openssl./config --prefix=/usr/local/openssl shared zlibmake &amp;&amp; make installecho -e &quot;\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/openssl/lib&quot; &gt;&gt; /etc/profilesource /etc/profileln -s /usr/local/openssl/lib/libssl.so.1.1 /usr/lib64/libssl.so.1.1ln -s /usr/local/openssl/lib/libcrypto.so.1.1 /usr/lib64/libcrypto.so.1.1mv /usr/bin/openssl /usr/bin/openssl-1.0.1ln -s /usr/local/openssl/bin/openssl /usr/bin/opensslopenssl    version    exit    # 下个版本的说明 https://wiki.openssl.org/index.php/OpenSSL_3.0</code></pre><h2 id="程序的下载与编译"><a href="#程序的下载与编译" class="headerlink" title="程序的下载与编译"></a>程序的下载与编译</h2><ol start="3"><li>下载程序</li></ol><pre><code class="sh">mkdir -p /home/common/python3.8  &amp;&amp; cd /home/common/python3.8#测试表明，Python 并没有限制 sqlite 版本；不过关闭 --enable-loadable-sqlite-extensions 或者 --enable-optimizations 均能编译通过（虽然同样的报错还在）。wget https://www.python.org/ftp/python/3.8.7/Python-3.8.7.tgz    官方手册 https://docs.python.org/release/3.8.7    sqlite教程 https://docs.python.org/3.8/library/sqlite3.htmltar -xzvf Python-3.8.7.tgz</code></pre><ol start="4"><li>配套修改组件的编译配置（<a href="https://docs.python.org/3.8/whatsnew/changelog.html#changelog">https://docs.python.org/3.8/whatsnew/changelog.html#changelog</a> 链接中指明了 Windows、MacOS 中集成的 sqlite 版本号，但是 Linux 的 Python 3 并没有继承 sqlite，因此需要如下配置 sqlite 库）</li></ol><pre><code class="sh"># ModuleNotFoundError: No module named &#39;_sqlite3&#39;gedit /home/common/python3.8/Python-3.8.7/setup.py    sqlite_inc_paths        &#39;/usr/local/sqlite/include&#39;,        &#39;/usr/local/sqlite/include/sqlite3&#39;,#undefined symbol: __gcov_indirect_call_profiler# cd /home/common/python3.8/Python-3.8.7 &amp;&amp; ./python -E -S -m sysconfig --generate-posix-vars # 报错信息同上# 网友中有通过设置语言</code></pre><ol start="5"><li>编译</li></ol><pre><code class="sh">whereis pythonmkdir /usr/local/python3cd /home/common/python3.8/Python-3.8.7export CPPFLAGS=&quot; -Wno-error=coverage-mismatch&quot;  # 可选./configure  --prefix=/usr/local/python3 --with-openssl=/usr/local/openssl --enable-shared CFLAGS=-fPIC --enable-profiling --enable-loadable-sqlite-extensions    #LD_RUN_PATH=/usr/local/lib ./configure  --prefix=/usr/local/python3 --with-openssl=/usr/local/openssl --enable-shared CFLAGS=-fPIC --enable-optimizations --enable-profiling --enable-loadable-sqlite-extensions   |grep -v &quot;yes&quot;    LD_RUN_PATH=/usr/local/lib: 可选    --prefix 可把所有资源文件放在指定路径下，卸载软件或移植软件只需要对应的文件夹操作。        不指定的话，可执行文件默认放在/usr/local/bin，库文件默认放在/usr/local/lib，        配置文件默认放在/usr/local/etc，其它的资源文件放在/usr/local/share，比较凌乱        要卸载程序，也可以在原来的make目录下用一次make uninstall，但前提是make文件指定过uninstall，否则卸载要结合安装日志来进行逐一删除    --enable-optimizations 加上后性能有 10% 左右的优化，但会明显增加编译时间；        且 https://bugs.python.org/issue34112 提出 gcc 8.1 以下可能编译不过    --enable-shared CFLAGS=-fPIC  是使用 YCM、pyinstaller、caffe、mysqlclient 等一系列功能的需要(后者确保编译时使用相对路径)    --enable-profiling：let you profile the interpreter with gprof    --enable-loadable-sqlite-extensions：support loadable extensions in _sqlite module    # 查看帮助 ./configure --help 或  ./configure -h    # 在更改 ./configure 编译参数后必须清除生成的文件 make clean &amp;&amp; make distcleanmake -j4     #LD_RUN_PATH=/usr/local/lib make -j4     # 警告：‘/home/common/python3.8/Python-3.8.7/build/temp.linux-x86_64-3.8/home/common/python3.8/Python-3.8.7/Modules/resource.gcda’的版本是‘404R’，需要的版本‘408*’ [默认启用]    cd /home/common/python3.8/Python-3.8.7/build/lib.linux-x86_64-3.8    ls  |grep sqlitemake install &gt; py3-install-`date +%Y%m%d`.log</code></pre><h2 id="关联系统"><a href="#关联系统" class="headerlink" title="关联系统"></a>关联系统</h2><ul><li><p>添加到系统</p><pre><code class="sh"># 设置环境变量，也可以直接将 /usr/local/python3/bin 加入 /etc/profile 文件的环境变量 path 中ln -s /usr/local/python3/bin/python3 /usr/bin/python3    # 考虑到 yum 必须使用 python 2 因此，不能命名为 python，切记！    ln -s /usr/local/python3/bin/python3 /usr/bin/py3ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3ln -s /usr/local/python3/bin/python3-config /usr/bin/python3-configcp /usr/local/python3/lib/libpython3.8.so.1.0 /usr/lib64    #/usr/local/python3/bin/python3.8: error while loading shared libraries: libpython3.8.so.1.0: cannot open shared object file: No such file or directory    cd /usr/local/lib    ln -s libpython3.8.so.1.0 libpython3.8.so    cp /usr/local/python3/lib/libpython3.8.so.1.0 /usr/local/libldconfig -vpython -V    whereis python    whereis python3find / -name _sqlite*.sopython3    import sqlite3    Ctrl+ Dpip3 -V    # pip 21.0 将在 2021 年 1 月释出，将停止支持 Python 2.7（Python 2.x） 系列pip -V    #python 2</code></pre></li><li><p>修改 Python3环境变量</p><pre><code class="sh">vi ~/.bash_profile  将“PATH=$PATH:$HOME/bin”修改为“PATH=$PATH:$HOME/bin:/usr/local/python3/bin”    source ~/.bash_profile    # 关闭报警    export PIP_DISABLE_PIP_VERSION_CHECK=1</code></pre></li><li><p>修复Python2的关联</p><pre><code class="sh">vi /usr/bin/yumvi /usr/bin/yum-config-managervim /usr/libexec/urlgrabber-ext-downvi /usr/libexec/ibus-ui-gtkvi /usr/bin/ibus-setupvi /usr/libexec/ibus-engine-tablevi /usr/bin/gnome-tweak-tool</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;依赖包的安装&quot;&gt;&lt;a href=&quot;#依赖包的安装&quot; class=&quot;headerlink&quot; title=&quot;依赖包的安装&quot;&gt;&lt;/a&gt;依赖包的安装&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;编译环境的安装（centos6 默认已具备）&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code cla
      
    
    </summary>
    
    
      <category term="编程笔记" scheme="https://faradays-studio.gitee.io/categories/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="https://faradays-studio.gitee.io/tags/Linux/"/>
    
      <category term="CentOS" scheme="https://faradays-studio.gitee.io/tags/CentOS/"/>
    
      <category term="Python" scheme="https://faradays-studio.gitee.io/tags/Python/"/>
    
      <category term="安装" scheme="https://faradays-studio.gitee.io/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="编译" scheme="https://faradays-studio.gitee.io/tags/%E7%BC%96%E8%AF%91/"/>
    
      <category term="sqlite" scheme="https://faradays-studio.gitee.io/tags/sqlite/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 6 编译安装 sqlite 3</title>
    <link href="https://faradays-studio.gitee.io/202103211734/"/>
    <id>https://faradays-studio.gitee.io/202103211734/</id>
    <published>2021-03-21T09:34:41.000Z</published>
    <updated>2021-03-21T09:39:58.790Z</updated>
    
    <content type="html"><![CDATA[<p>由于安装 Python 环境的需要，需要对 Python 进行编译安装。</p><h2 id="安装编译环境"><a href="#安装编译环境" class="headerlink" title="安装编译环境"></a>安装编译环境</h2><p>先安装必要的环境，博主的系统中默认其实已经包含了</p><pre><code class="sh">yum install sqlite-devel</code></pre><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><pre><code class="sh">cd /home/common/wget https://www.sqlite.org/2020/sqlite-autoconf-3320300.tar.gztar -xvzf sqlite-autoconf-3320300.tar.gzcd sqlite-autoconf-3320300/mkdir -p /usr/local/sqlite./configure --prefix=/usr/local/sqlitemake -j4 &amp;&amp; make install</code></pre><h2 id="关联系统"><a href="#关联系统" class="headerlink" title="关联系统"></a>关联系统</h2><pre><code class="sh">vim /etc/ld.so.conf.d/sqlite3.conf    # 可选    /usr/local/sqlite/libldconfig</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于安装 Python 环境的需要，需要对 Python 进行编译安装。&lt;/p&gt;
&lt;h2 id=&quot;安装编译环境&quot;&gt;&lt;a href=&quot;#安装编译环境&quot; class=&quot;headerlink&quot; title=&quot;安装编译环境&quot;&gt;&lt;/a&gt;安装编译环境&lt;/h2&gt;&lt;p&gt;先安装必要的环境，博
      
    
    </summary>
    
    
      <category term="编程笔记" scheme="https://faradays-studio.gitee.io/categories/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="https://faradays-studio.gitee.io/tags/Linux/"/>
    
      <category term="CentOS" scheme="https://faradays-studio.gitee.io/tags/CentOS/"/>
    
      <category term="Python" scheme="https://faradays-studio.gitee.io/tags/Python/"/>
    
      <category term="安装" scheme="https://faradays-studio.gitee.io/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="编译" scheme="https://faradays-studio.gitee.io/tags/%E7%BC%96%E8%AF%91/"/>
    
      <category term="sqlite" scheme="https://faradays-studio.gitee.io/tags/sqlite/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 6.10 编译安装 GCC4.8.5</title>
    <link href="https://faradays-studio.gitee.io/202103072130/"/>
    <id>https://faradays-studio.gitee.io/202103072130/</id>
    <published>2021-03-07T13:30:40.000Z</published>
    <updated>2021-03-07T13:59:11.729Z</updated>
    
    <content type="html"><![CDATA[<p>由于安装 python 3 的需要，需要升级 GCC；由于我的操作系统是 CentOS6.10，而且还需要考虑到工作软件系统的兼容，因此 GCC 版本暂时定为 4.8.5。测试表明，如果 Python 需要性能优化选项 <code>--enable-optimizations</code>，需要 GCC 8.2+ 以上的版本。</p><h2 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h2><h3 id="GCC-源码下载"><a href="#GCC-源码下载" class="headerlink" title="GCC 源码下载"></a>GCC 源码下载</h3><pre><code class="sh">cd /home/commonwget https://mirrors.tuna.tsinghua.edu.cn/gnu/gcc/gcc-4.8.5/gcc-4.8.5.tar.gztar xzvf gcc-4.8.5.tar.gz# 源码权限根据实际需要设定，实际上编译完成后这个文件夹用不到，因此可以不操作此步骤chmod 777 -R gcc-4.8.5/</code></pre><h3 id="依赖库源码下载"><a href="#依赖库源码下载" class="headerlink" title="依赖库源码下载"></a>依赖库源码下载</h3><pre><code class="sh"># 进入保存地址cd /home/common/gcc-4.8.5wget https://gmplib.org/download/gmp-6.1.2/gmp-6.1.2.tar.bz2tar xvf gmp-6.1.2.tar.bz2mv gmp-6.1.2 gmpwget https://ftp.gnu.org/gnu/mpfr/mpfr-3.1.6.tar.gztar xzvf mpfr-3.1.6.tar.gzmv mpfr-3.1.6 mpfrwget https://ftp.gnu.org/gnu/mpc/mpc-1.0.3.tar.gztar xzvf mpc-1.0.3.tar.gzmv mpc-1.0.3 mpcwget http://www.bastoul.net/cloog/pages/download/cloog-0.18.4.tar.gztar xzvf cloog-0.18.4.tar.gzmv cloog-0.18.4 cloogwget http://isl.gforge.inria.fr/isl-0.14.tar.gztar xzvf isl-0.14.tar.gzmv isl-0.14 isl</code></pre><h2 id="编译安装-GCC"><a href="#编译安装-GCC" class="headerlink" title="编译安装 GCC"></a>编译安装 GCC</h2><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><pre><code class="sh">#gcc4.4.7版本开始，官方推荐使用单独的目录，而不是在解压gcc源码后的目录中进行编译mkdir /home/common/gcc-buildcd gcc-build../gcc-4.8.5/configure --enable-checking=release --enable-languages=c,c++ --disable-multilib    # --with-pkgversion=version ：指定一个标识你的包的字符串    # --enable-languages=c,c++：可以使用 all，default，ada，c，c++，fortran，go，jit，lto，objc，obj-c++。    # --disable-multilib：禁止生成多个平台的代码    # --enable-bootstrap：冗余的编译检查工作    # --enable-gather-detailed-mem-stats：允许通过 -fmem-report 选项来输出编译其它程序时的实时内存使用情况    # --with-long-double-128：指定long double类型的默认值是128位。    # --enable-threads=posix：C++ 异常能处理多线程代码    # --without-bash-malloc：禁用了 Bash 的内存分配函数(malloc)，Bash 将使用更为稳定的 Glibc 里的 malloc 函数。    # --enable-multibyte：支持使用多字节字符编码的文件    grep &quot;error&quot; config.log# 默认的make不加-j参数效率比较低，加上多线程参数 -j4 和-j8性能差距不大，-j16性能就比较差date +%T &amp;&amp; make -j4 &amp;&amp; date +%T    # make clean：清除上次的make命令所产生的object文件（后缀为“.o”的文件）及可执行文件。    # make distclean：包含make clean，同时也将configure生成的文件全部删除掉。感觉有点像在 gcc-build 中执行 rm -rf 的删减版一样。    lscpu |grep -A 1 &#39;Model name&#39;make install</code></pre><h3 id="关联系统"><a href="#关联系统" class="headerlink" title="关联系统"></a>关联系统</h3><p>如果上述安装过程中指定了 gcc 的安装路径，那么需要关联系统。当然，我上一步并没有指定安装路径，而是直接替代了系统自带的 GCC 4.4.7。</p><pre><code class="sh"># 更新环境echo &#39;/usr/local/gcc-4.8.5/lib64&#39; &gt; /etc/ld.so.conf.d/gcc4.8.5.confldconfig# 在自定义的全局配置文件中添加 PATH 变量vim /etc/profile.d/hhjos6.sh    PATH=/usr/local/gcc-4.8.5/bin:$PATHmv /usr/bin/gcc /usr/bin/gcc-4.4.7mv /usr/bin/g++ /usr/bin/g++-4.4.7mv /usr/bin/c++ /usr/bin/c++-4.4.7ln -s /usr/local/gcc/bin/gcc /usr/bin/gccln -s /usr/local/gcc/bin/c++ /usr/bin/c++ln -s /usr/local/gcc/bin/g++ /usr/bin/g++ln -s /usr/local/gcc/lib64/libstdc++.so.6.0.22 /usr/lib64/libstdc++.so.6</code></pre><h3 id="版本检查"><a href="#版本检查" class="headerlink" title="版本检查"></a>版本检查</h3><pre><code class="sh">gcc -v    gcc -dumpversion    ll /usr/bin/cc    strings /usr/lib64/libstdc++.so.6 | grep GLIBCg++ -v    g++ -dumpversion    c++ -dumpversion</code></pre><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><blockquote><p>如果还要尝试 <code>yum -y install centos-release-scl</code> 安装临时版本的 GCC ，那多数人并不会成功，毕竟 CentOS 6 在官方都是不支持的版本了。博主这次安装 GCC 4.8.5 花了很长时间，毕竟坑太多了，而且已有程序环境的兼容性也必须兼顾。因此虽然参考了以下这些文章，但是操作步骤上却有差异；就是一点点差异，我浪费了很多很多的时间！实际上，我看过的文章就不止这些了，但对我并没有提供任何的帮助。</p></blockquote><ol><li><p>TUNA.<code>清华大学开源软件镜像站（GCC）</code>[EB/OL].<a href="https://mirrors.tuna.tsinghua.edu.cn/gnu/gcc">https://mirrors.tuna.tsinghua.edu.cn/gnu/gcc</a>, 2021/02/20.</p></li><li><p>peterpanzsy.<code>centos 6 升级gcc</code>[EB/OL].<a href="https://www.cnblogs.com/peterpanzsy/archive/2013/04/10/3006838.html">https://www.cnblogs.com/peterpanzsy/archive/2013/04/10/3006838.html</a>, 2021/02/20.</p></li><li><p>创小新.<code>LINUX CENTOS6.8编译安装GCC-6.3.0 升级GCC</code>[EB/OL].<a href="https://chuangxiao.xin/h-nd-87.html">https://chuangxiao.xin/h-nd-87.html</a>, 2021/02/20.</p></li><li><p>ljpwinxp.<code>Centos 6.9 编译安装gcc 4.8.5</code>[EB/OL].<a href="https://blog.51cto.com/191226139/2066137">https://blog.51cto.com/191226139/2066137</a>, 2021/02/20.</p></li><li><p>Free Software Foundation.<code>GCC 4.8 Release Series: Changes, New Features, and Fixes</code>[EB/OL].<a href="https://gcc.gnu.org/gcc-4.8/changes.html">https://gcc.gnu.org/gcc-4.8/changes.html</a>, 2021/02/20.</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于安装 python 3 的需要，需要升级 GCC；由于我的操作系统是 CentOS6.10，而且还需要考虑到工作软件系统的兼容，因此 GCC 版本暂时定为 4.8.5。测试表明，如果 Python 需要性能优化选项 &lt;code&gt;--enable-optimization
      
    
    </summary>
    
    
      <category term="编程笔记" scheme="https://faradays-studio.gitee.io/categories/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="https://faradays-studio.gitee.io/tags/Linux/"/>
    
      <category term="CentOS" scheme="https://faradays-studio.gitee.io/tags/CentOS/"/>
    
      <category term="安装" scheme="https://faradays-studio.gitee.io/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="GCC" scheme="https://faradays-studio.gitee.io/tags/GCC/"/>
    
      <category term="编译" scheme="https://faradays-studio.gitee.io/tags/%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>文章导航</title>
    <link href="https://faradays-studio.gitee.io/202103060055/"/>
    <id>https://faradays-studio.gitee.io/202103060055/</id>
    <published>2021-03-05T16:55:56.000Z</published>
    <updated>2021-03-05T16:55:58.366Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文章导航"><a href="#文章导航" class="headerlink" title="文章导航"></a>文章导航</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文章导航&quot;&gt;&lt;a href=&quot;#文章导航&quot; class=&quot;headerlink&quot; title=&quot;文章导航&quot;&gt;&lt;/a&gt;文章导航&lt;/h1&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>CentOS6 升级安装 MySQL 5.7</title>
    <link href="https://faradays-studio.gitee.io/202103031918/"/>
    <id>https://faradays-studio.gitee.io/202103031918/</id>
    <published>2021-03-03T11:18:21.000Z</published>
    <updated>2021-03-07T13:31:09.409Z</updated>
    
    <content type="html"><![CDATA[<p>由于 CentOS6 自带的 MySQL 5.1 性能不行，使用过程中遇到了很多问题，<del>（误）最关键的是，都不支持 utf8mb4，后台去检查数据老是遇到乱码，烦死了！mysql 5.5.3+ 才支持 utf8mb4，（逃…）</del>因此我决定安装 MySQL 5.7 。</p><h2 id="设置国内源"><a href="#设置国内源" class="headerlink" title="设置国内源"></a>设置国内源</h2><p>最近几年里，我给好几个系统安装过 MySQL，可是国外官网的速度实在是太瘆人了；后来才知道这软件居然也有国内源，用了之后心情都好很多了。</p><p><code>gedit /etc/yum.repos.d/mysql-community.repo</code>，填入以下内容：</p><pre><code class="ini">[mysql-connectors-community]name=MySQL Connectors Communitybaseurl=https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/mysql-connectors-community-el6-$basearch/enabled=1gpgcheck=1gpgkey=https://repo.mysql.com/RPM-GPG-KEY-mysql[mysql-tools-community]name=MySQL Tools Communitybaseurl=https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/mysql-tools-community-el6-$basearch/enabled=1gpgcheck=1gpgkey=https://repo.mysql.com/RPM-GPG-KEY-mysql[mysql-5.6-community]name=MySQL 5.6 Community Serverbaseurl=https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/mysql-5.6-community-el6-$basearch/enabled=0gpgcheck=1gpgkey=https://repo.mysql.com/RPM-GPG-KEY-mysql[mysql-5.7-community]name=MySQL 5.7 Community Server#baseurl=https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/mysql-5.7-community-el6-$basearch/#baseurl=https://mirrors4.tuna.tsinghua.edu.cn/mysql/yum/mysql-5.7-community-el6-x86_64/baseurl=https://mirrors.ustc.edu.cn/mysql-repo/yum/mysql-5.7-community/el/6/x86_64/enabled=1gpgcheck=1gpgkey=https://repo.mysql.com/RPM-GPG-KEY-mysql[mysql-8.0-community]name=MySQL 8.0 Community Serverbaseurl=https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/mysql-8.0-community-el6-$basearch/enabled=0gpgcheck=1gpgkey=https://repo.mysql.com/RPM-GPG-KEY-mysql</code></pre><h2 id="安装程序"><a href="#安装程序" class="headerlink" title="安装程序"></a>安装程序</h2><p>使用 yum 进行安装 MySQL</p><pre><code class="sh">yum makecacheyum install mysql-community-libs-compat*yum install mysql-community-server</code></pre><p> 一般情况下，MySQL包括以下各个包：</p><table><thead><tr><th align="left">名字</th><th align="left">摘要说明</th><th>备注</th></tr></thead><tbody><tr><td align="left">mysql-community-client</td><td align="left">MySQL客户端应用程序和工具</td><td></td></tr><tr><td align="left">mysql-community-common</td><td align="left">服务器和客户端库的通用文件</td><td></td></tr><tr><td align="left">mysql-community-devel</td><td align="left">MySQL数据库客户端应用程序的开发头文件和库</td><td></td></tr><tr><td align="left">mysql-community-embedded-compat</td><td align="left">MySQL服务器作为嵌入式库，与使用库版本18的应用程序兼容</td><td></td></tr><tr><td align="left">mysql-community-libs</td><td align="left">MySQL数据库客户端应用程序的共享库</td><td></td></tr><tr><td align="left">mysql-community-libs-compat</td><td align="left">以前的MySQL安装的共享兼容性库</td><td></td></tr><tr><td align="left">mysql-community-server</td><td align="left">数据库服务器和相关工具</td><td></td></tr><tr><td align="left">mysql-community-server-debug</td><td align="left">调试服务器和插件二进制文件</td><td></td></tr><tr><td align="left">mysql-community-test</td><td align="left">MySQL服务器的测试套件</td><td></td></tr><tr><td align="left">mysql-community</td><td align="left">RPM的源代码类似于mysql-community-8.0.20-1.el7.src.rpm，具体取决于所选的OS</td><td></td></tr></tbody></table><blockquote><p>  安装还会在系统上创建一个名为的用户 mysql和一个名为的组 mysql。</p></blockquote><h2 id="MySQL-的初始化配置"><a href="#MySQL-的初始化配置" class="headerlink" title="MySQL 的初始化配置"></a>MySQL 的初始化配置</h2><h3 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h3><p><code>gedit /etc/my.cnf</code> 设定 MySQL 的编码参数以及默认端口</p><pre><code class="ini">[mysqld]port    = 6033character-set-server=utf8mb4collation_server=utf8mb4_general_cidefault-time-zone = &#39;+8:00&#39;explicit_defaults_for_timestamp=true[client]port    = 6033default-character-set=utf8mb4</code></pre><h3 id="修改服务"><a href="#修改服务" class="headerlink" title="修改服务"></a>修改服务</h3><p>设定 MySQL 开机启动</p><pre><code class="sh">suchkconfig --add mysqldchkconfig mysqld on# 启动 MySQL 服务service mysqld start</code></pre><h3 id="账户和密码管理"><a href="#账户和密码管理" class="headerlink" title="账户和密码管理"></a>账户和密码管理</h3><ol><li>查看 MySQL 默认密码</li></ol><pre><code class="sh">grep &quot;temporary password&quot; /var/log/mysqld.log</code></pre><ol start="2"><li>设定 root 密码，并添加普通用户 david</li></ol><pre><code class="sh">mysql -uroot -p    # 本地    ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;fs@DB135&#39;;        # SET PASSWORD FOR &#39;root&#39;@&#39;localhost&#39; = PASSWORD(&#39;fs@DB135&#39;);       # 远程    ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;fs@ABCD.135&#39;;    # 普通用户 david    CREATE USER &#39;david&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;dav#D2468&#39;;    CREATE USER &#39;david&#39;@&#39;%&#39; IDENTIFIED BY &#39;dav#D-124857&#39;;    # 查看用户    select user,host,password from mysql.user;    exit</code></pre><blockquote><p>如果由于默认的密码强度校验导致本地使用的简单密码无法通过，可以在 MySQL 中使用 <code>set global validate_password_policy=0;</code> 临时关闭，不过，应当谨慎使用哦!</p></blockquote><ol start="3"><li>如果在使用过程中，需要修改账户的本地、远方访问权限，示例如下：</li></ol><pre><code class="sh"># 局域网访问：主库grant replication slave on *.* to &#39;david&#39;@&#39;192.168.88.%&#39; identified by &#39;dav#D2468&#39; with grant option;# 局域网访问：从库（在对端主机配置）grant all privileges on *.* to &#39;david&#39;@&#39;192.168.88.%&#39; identified by &#39;dav#D2468&#39; with grant option;# 远程访问（db1、db2为系统中的数据库名）GRANT ALL PRIVILEGES ON db1.* TO &#39;david&#39;@&#39;%&#39; IDENTIFIED BY &#39;dav.D2468-fs1&#39; WITH GRANT OPTION;GRANT ALL PRIVILEGES ON db2.* TO &#39;david&#39;@&#39;%&#39; IDENTIFIED BY &#39;dav#D-124857&#39; WITH GRANT OPTION;# 本地访问（临时性修改密码策略，从而在保留原有授权的基础下，增加密码较为简单的访问）set global validate_password_policy=0;GRANT ALL ON db1.* TO &#39;david&#39;@&#39;localhost&#39;   IDENTIFIED BY &#39;david.1357&#39; WITH GRANT OPTION;GRANT ALL ON db2.* TO &#39;david&#39;@&#39;127.0.0.%&#39;   IDENTIFIED BY &#39;david.2468&#39; WITH GRANT OPTION;# 执行生效flush privileges;</code></pre><ol start="4"><li>如果需要清除权限，示例如下：</li></ol><pre><code class="sh">mysql -u root -p    select user,host, authentication_string from mysql.user;    # 清除  delete 权限    REVOKE delete ON *.* FROM &#39;david&#39;@&#39;localhost&#39;;    revoke delete on *.* from &#39;david&#39;@&#39;%&#39;;    # 清除 all 权限    revoke all on *.* from &#39;david&#39;@&#39;localhost&#39;;    REVOKE ALL PRIVILEGES ON *.* FROM &#39;david&#39;@&#39;%&#39;;    # 执行生效    FLUSH PRIVILEGES;</code></pre><ol start="5"><li>配套修改防火墙确保远程主机的访问，如下：</li></ol><pre><code class="sh">gedit /etc/sysconfig/iptables    -A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT    #-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT    -A INPUT -m state --state NEW -m tcp -p tcp --dport 6033 -j ACCEPT    -A INPUT -j REJECT --reject-with icmp-host-prohibitedservice iptables restart</code></pre><h3 id="安装故障排查"><a href="#安装故障排查" class="headerlink" title="安装故障排查"></a>安装故障排查</h3><p>查看错误日志是最直接有效的，如果不指定，文件名则为主机名（此处为 hhjos6 ），如：</p><pre><code class="sh">tail -f /var/lib/mysql/hhjos6.err</code></pre><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><p>TUNA.<code>Mysql Community Edition 镜像使用帮助</code>[EB/OL].<a href="https://mirrors.cnnic.cn/help/mysql/">https://mirrors.cnnic.cn/help/mysql/</a>, 2021/03/05.</p></li><li><p>Oracle Corporation and/or its affiliates.<code>MySQL Product Archives</code>[EB/OL].<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a>, 2021/03/05.</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于 CentOS6 自带的 MySQL 5.1 性能不行，使用过程中遇到了很多问题，&lt;del&gt;（误）最关键的是，都不支持 utf8mb4，后台去检查数据老是遇到乱码，烦死了！mysql 5.5.3+ 才支持 utf8mb4，（逃…）&lt;/del&gt;因此我决定安装 MySQL 
      
    
    </summary>
    
    
      <category term="编程笔记" scheme="https://faradays-studio.gitee.io/categories/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="https://faradays-studio.gitee.io/tags/Linux/"/>
    
      <category term="国内源" scheme="https://faradays-studio.gitee.io/tags/%E5%9B%BD%E5%86%85%E6%BA%90/"/>
    
      <category term="CentOS" scheme="https://faradays-studio.gitee.io/tags/CentOS/"/>
    
      <category term="MySQL" scheme="https://faradays-studio.gitee.io/tags/MySQL/"/>
    
      <category term="安装" scheme="https://faradays-studio.gitee.io/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="配置" scheme="https://faradays-studio.gitee.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="权限" scheme="https://faradays-studio.gitee.io/tags/%E6%9D%83%E9%99%90/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统的多条件查询与匹配</title>
    <link href="https://faradays-studio.gitee.io/202102122028/"/>
    <id>https://faradays-studio.gitee.io/202102122028/</id>
    <published>2021-02-12T12:28:32.000Z</published>
    <updated>2021-02-24T12:22:14.431Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><ol><li><p>vim 的多条件匹配</p><table><thead><tr><th>与</th><th>或</th><th>非</th></tr></thead><tbody><tr><td>?<code>.*a</code>\&amp;<code>.*b</code></td><td>?<code>a</code>\|<code>b</code></td><td></td></tr><tr><td>?<code>a</code>\&amp;<code>.*b</code></td><td></td><td></td></tr></tbody></table></li><li><p>grep 的多条件匹配</p><table><thead><tr><th>与</th><th>或</th><th>非</th></tr></thead><tbody><tr><td>grep <code>&#39;pattern1&#39;</code> filename | grep <code>&#39;pattern2&#39;</code></td><td>grep ‘<code>pattern1</code>\|<code>pattern2</code>‘ filename</td><td>grep -v ‘<code>pattern</code>‘ filename</td></tr><tr><td>grep -E ‘<code>pattern1</code>.*<code>pattern2</code>‘ filename</td><td>grep -E ‘<code>pattern1</code>|<code>pattern2</code>‘ filename</td><td></td></tr><tr><td>grep -E ‘<code>pattern1</code>.*<code>pattern2</code>|<code>pattern2</code>.*<code>pattern1</code>‘ filename</td><td>grep -e ‘<code>pattern1</code> -e <code>pattern2</code>‘ filename</td><td></td></tr><tr><td></td><td>egrep ‘<code>pattern1</code>|<code>pattern2</code>‘ filename</td><td></td></tr></tbody></table></li></ol><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="与-运算"><a href="#与-运算" class="headerlink" title="与 运算"></a><code>与</code> 运算</h3><ol><li><p>查看 12 月份的错误信息：<code>grep</code> ‘<strong>error</strong>‘ /var/log/message <code>| grep</code> ‘<strong>Feb</strong> ‘；</p></li><li><p>查看用户下有无特定程序：</p><p> ps -Af | <code>grep -E</code> ‘root’ | <code>grep</code> bash<br> ps -Af | <code>grep</code>  herc  |<code>grep</code> bash</p></li></ol><blockquote><p>在系统的日常维护中，应当应该配合上下文检索信息，例如匹配前3条、后1条： ausearch -f /etc/passwd   | <code>grep -B3 -A1</code> cat。</p></blockquote><ol start="3"><li><p>匹配文件中的两个字符串：</p><p> 第一个关键词位于行首：/2021-1-18<code>\&amp;.*</code> d</p><p> <img src="/static/img/20210224-vim/vim-%E5%A4%9A%E6%9D%A1%E4%BB%B6%E2%80%9C%E4%B8%8E%E2%80%9D%E8%BF%90%E7%AE%97-HHJ-20210224.png" alt="vim-多条件“与”运算"></p><p> 第一个关键词位于行中： /<code>.*</code>9:23<code>\&amp;.*</code> d</p><p> <img src="/static/img/20210224-vim/vim-%E5%A4%9A%E6%9D%A1%E4%BB%B6%E2%80%9C%E4%B8%8E%E2%80%9D%E8%BF%90%E7%AE%972-HHJ-20210224.png" alt="vim-多条件“与”运算2"></p></li></ol><h3 id="或-运算"><a href="#或-运算" class="headerlink" title="或 运算"></a><code>或</code> 运算</h3><ol><li><p>查看是否存在这些进程：ps -Af | <code>grep -E</code> ‘mysql<code>|</code>postgres<code>|</code>xinetd<code>|</code>amanda’；</p></li><li><p>查看相应程序是否开机运行的配置：chkconfig –list | <code>grep -E</code> ‘mysql<code>|</code>postgres<code>|</code>xinetd<code>|</code>amanda’。</p></li><li><p>匹配文件中的两个字符串： /<code>.*</code>Send<code>\|</code>83</p><p> <img src="/static/img/20210224-vim/vim-%E5%A4%9A%E6%9D%A1%E4%BB%B6%E2%80%9C%E6%88%96%E2%80%9D%E8%BF%90%E7%AE%97-HHJ-20210224.png" alt="vim-多条件“与”运算"></p></li></ol><h3 id="非-运算"><a href="#非-运算" class="headerlink" title="非 运算"></a><code>非</code> 运算</h3><ol><li><p>查看非空密码用户：cat /etc/shadow |<code>grep -v</code> “!!“；</p></li><li><p>查看可以登录系统的用户：cat /etc/passwd |<code>grep -v</code> “nologin”。</p></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><p>夜之眷属.<code>vim中多条件查询</code>[EB/OL].<a href="https://blog.csdn.net/qq_28112995/article/details/106741835">https://blog.csdn.net/qq_28112995/article/details/106741835</a>, 2021/02/12.</p></li><li><p>stalin_.<code>Linux--使用grep命令进行多条件查询（AND，OR，NOT）</code>[EB/OL].<a href="https://blog.csdn.net/stalin_/article/details/81450633">https://blog.csdn.net/stalin_/article/details/81450633</a>, 2021/02/12.</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;vim 的多条件匹配&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;与&lt;/th&gt;
&lt;th&gt;或&lt;
      
    
    </summary>
    
    
      <category term="电脑爱好者" scheme="https://faradays-studio.gitee.io/categories/%E7%94%B5%E8%84%91%E7%88%B1%E5%A5%BD%E8%80%85/"/>
    
    
      <category term="shell" scheme="https://faradays-studio.gitee.io/tags/shell/"/>
    
      <category term="Linux" scheme="https://faradays-studio.gitee.io/tags/Linux/"/>
    
      <category term="多条件查询" scheme="https://faradays-studio.gitee.io/tags/%E5%A4%9A%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/"/>
    
      <category term="vim" scheme="https://faradays-studio.gitee.io/tags/vim/"/>
    
      <category term="grep" scheme="https://faradays-studio.gitee.io/tags/grep/"/>
    
  </entry>
  
  <entry>
    <title>写论文的苦，你未必想尝一下</title>
    <link href="https://faradays-studio.gitee.io/202101301128/"/>
    <id>https://faradays-studio.gitee.io/202101301128/</id>
    <published>2021-01-30T03:28:55.000Z</published>
    <updated>2021-02-03T14:36:15.266Z</updated>
    
    <content type="html"><![CDATA[<p>最近 3 个星期，一直在忙着写论文，走路在想，吃饭在想，睡觉也在想，总感觉某个地方有个难关需要我去跨越，我到了附近，却一直没有发现；等到论文基本写出来后，发现写论文是挺辛苦的！</p><h2 id="选题的苦"><a href="#选题的苦" class="headerlink" title="选题的苦"></a>选题的苦</h2><p>如果认真去做科研论文的话，选题是很苦的，因为是很难找到合适的题目的。</p><p>我都工作快 10 年了，也就最近才有些灵感和题材。一个人很难独自拥有一些高大上的项目，我的工作是搬砖的，就很难去研究烧砖技术，更多的是考虑如何搬运、如何与人协作、如何做好工期管理等等。</p><p>因此，好不容易在工作中，发挥了一些重要作用，在种种压力之下，准备去写论文；拟好了粗略的提纲，感觉去找一个知识数据库的账户，将同领域、同主题的文献找出来，一看，不好了，怎么这么多人都写了，多半只能放弃，就算不放弃，题材也很难写出新意来；水论文的人很多，可是自己扪心自问，那并不是我想要的，丢掉吧！</p><p>由于工作繁忙以及自己心里的这一丝丝骄傲，我好长时间都没有写出论文来，明明我业绩最多、贡献最大，可是我比不少按部就班的同事晚了 2 年。有些时日里，我焦虑得不行，不肯将就，也没有天降福利，在两个单位里边都被关心我的大领导约谈了…</p><p>好不容易能够选了一个题目，能够勉强说有创新性、实用价值的，又得在诸多先行者的背影里，寻找空间，作出差异化来，不然，自己就真的是水论文了。</p><h2 id="写作的苦"><a href="#写作的苦" class="headerlink" title="写作的苦"></a>写作的苦</h2><p>如果认真去做科研论文的话，写作的过程也是很苦的，因为写的东西不一定被人认可。</p><p>工作的过程，事情做完就了事了；可是如果发论文，那么自己得将事情的来龙去脉、因果、主次、先后等等都弄明白。最近写的这个论文，是关于计算机技术的，在网络上、操作系统里、论文里，都有零零星星的表述，可是有些已经过期了，有些别人就写错了，有些别人提供的参数、程序、方法等等不适合实际情况，都得去一一验证，一一去比较，一一去部署，最近这两周，我的头一直很疼，因为有些试验尝试了十多次了，一次需要一两个小时；日常的工作仍然需要继续，家里儿女仍得操心，老家也有一些烦心事，新一年的工作仍然很迷茫，这一些都让我很为难。</p><p>好不容易写出素材来了，还得修改文字；标题是否有吸引力，摘要是否清楚，翻译是否妥当，文章各级标题是否层次鲜明，各个段落的内容是否清楚明白、是否啰嗦繁杂、是否存在逻辑问题，得来回修改。</p><p>感觉差不多了，得控制字数，不能太多，也不能太少；图片得自己去绘制，不然显示效果不好；图表得考虑，论文的相关指标能否让别人看得懂、评估得上等级。因此，各种修改也得耗好几个通宵！</p><h2 id="发表的苦"><a href="#发表的苦" class="headerlink" title="发表的苦"></a>发表的苦</h2><p>如果认真去做科研论文的话，发表过程也是很辛苦的，因为得到好期刊的认可也是相当的困难的。好不容易有了内容，得开始寻找适当的杂志了。找了几个心仪的杂志，论文格式好好捯饬了一下，存了很多个版本格式，花了几天也完成了。</p><p>自己一无人脉，二无平台，三无能力，核心期刊基本都很难；前一个论文我整整收了三年，投了多家期刊，有些是毫不客气的说水平不行，有些和和气气地说不符合杂志风格，有些啥也没说退稿回来。</p><h2 id="成果的苦"><a href="#成果的苦" class="headerlink" title="成果的苦"></a>成果的苦</h2><p>如果认真去做科研论文的话，论文发表了也是很苦的，因为不是投入越大、回报越大。</p><p>很不容易地，论文发表了，可是好些平时不做事的同事，不知不觉地就发了好几篇论文，评选职称了，自己又显得落后了，这种苦真不是滋味！</p><p>看着别人那么水，和自己发在同样的杂志上，并不知道自己来回倒腾是否有价值。其实杂志里边的论文多数都是过得去的，奈何偏偏有几个相熟的人凑了一些他从来没有弄清楚过的内容上去，也发表了，心里何其翻覆！这样一对比，再也不认为那些核心期刊里侃侃而谈的大家们徒有其表了，而是自惭形秽不已。</p><p>论文发表了，自己回忆起来，那个过程仍然是苦涩的，很长时间都挥之不去。可是，如果得到了认可，对别人也发挥了作用，那心里在很短的瞬间也是会有甘之如饴的愉悦的。</p><p>其实，写论文不一定苦，苦的是放不下心里的结，随性一点的话，一切会好很多。春城冬暖，愿大家都能享受这美好的阳光。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近 3 个星期，一直在忙着写论文，走路在想，吃饭在想，睡觉也在想，总感觉某个地方有个难关需要我去跨越，我到了附近，却一直没有发现；等到论文基本写出来后，发现写论文是挺辛苦的！&lt;/p&gt;
&lt;h2 id=&quot;选题的苦&quot;&gt;&lt;a href=&quot;#选题的苦&quot; class=&quot;headerl
      
    
    </summary>
    
    
      <category term="坐井观天" scheme="https://faradays-studio.gitee.io/categories/%E5%9D%90%E4%BA%95%E8%A7%82%E5%A4%A9/"/>
    
    
      <category term="论文" scheme="https://faradays-studio.gitee.io/tags/%E8%AE%BA%E6%96%87/"/>
    
      <category term="科研" scheme="https://faradays-studio.gitee.io/tags/%E7%A7%91%E7%A0%94/"/>
    
      <category term="冷板凳" scheme="https://faradays-studio.gitee.io/tags/%E5%86%B7%E6%9D%BF%E5%87%B3/"/>
    
      <category term="苦" scheme="https://faradays-studio.gitee.io/tags/%E8%8B%A6/"/>
    
  </entry>
  
  <entry>
    <title>2021年随笔</title>
    <link href="https://faradays-studio.gitee.io/202101171157/"/>
    <id>https://faradays-studio.gitee.io/202101171157/</id>
    <published>2021-01-17T03:57:31.000Z</published>
    <updated>2021-08-27T13:34:19.713Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2021-01-28，辛苦"><a href="#2021-01-28，辛苦" class="headerlink" title="2021/01/28，辛苦"></a>2021/01/28，辛苦</h2><p>写论文，又到凌晨，身心疲惫不已的，有种长路漫漫之感。想认真去做事，可是效果却不甚了了；人生甚是困难…</p><h2 id="2021-03-03，愚钝"><a href="#2021-03-03，愚钝" class="headerlink" title="2021/03/03，愚钝"></a>2021/03/03，愚钝</h2><p>最近，母亲在老家动作频频，与邻居们争论不休，好几个人都向我倾诉；然而我也无能为力，一个顽固的、生病的孤独老太婆，我又能将她怎么样呢？！</p><p>工作上也是困难重重，好几天都无精打采的，总结材料怎么也写不出来，设备改造也推进不力，科技创新项目也没有开展，论文还迟迟没有动笔。心里负担太重，天空都是灰色的了！</p><h2 id="2021-08-27，累并快乐着"><a href="#2021-08-27，累并快乐着" class="headerlink" title="2021/08/27，累并快乐着"></a>2021/08/27，累并快乐着</h2><p>最近 4 个月，几乎没有写什么博文，并非偷懒；而是事情实在太忙碌了，匆匆忙忙地赶完工作上的事情，然后我一直在看论文、做试验和写论文中，连考证和辅导小孩的事情都完全地丢下了。</p><p>4 个月，说不尽的辛劳，道不完的心酸。很长一段时间里，心里一直盘旋着论文方方面面的事情，睡也睡不着，困得浑身乏力，累得甚至小病了一场；但是我还是一心一意地做着朴实的论文试验，反反复复地改文章，生病的时候，休息一会又回到电脑前做试验、改论文…好几个同事笑我太认真，以为我是为了评职称。其实，我评下一个等级职称的业绩和论文等各个方面都准备妥当了；我就是想好好地做一下科研而已——虽然我并非职业的科研人。我想，也许有一天，有在读研究生看了我的论文，得到了一些的启发，那我就挺满足了！</p><p>前天，论文终于写完了；昨天，试验数据也基本整理好了；今天，心情终于稍稍轻松了一些。认真做事，很累，但是也很充实，有一种真切的快乐感——也许是因为前半生太苦，能够用自己的勤劳与智慧来创造有用的作品，是我的幸事！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2021-01-28，辛苦&quot;&gt;&lt;a href=&quot;#2021-01-28，辛苦&quot; class=&quot;headerlink&quot; title=&quot;2021/01/28，辛苦&quot;&gt;&lt;/a&gt;2021/01/28，辛苦&lt;/h2&gt;&lt;p&gt;写论文，又到凌晨，身心疲惫不已的，有种长路漫漫之感。
      
    
    </summary>
    
    
      <category term="星星心事" scheme="https://faradays-studio.gitee.io/categories/%E6%98%9F%E6%98%9F%E5%BF%83%E4%BA%8B/"/>
    
    
      <category term="随笔" scheme="https://faradays-studio.gitee.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="2021" scheme="https://faradays-studio.gitee.io/tags/2021/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 使用 yum 国内源实现加速下载</title>
    <link href="https://faradays-studio.gitee.io/202101171156/"/>
    <id>https://faradays-studio.gitee.io/202101171156/</id>
    <published>2021-01-17T03:56:05.000Z</published>
    <updated>2021-02-14T13:19:59.507Z</updated>
    
    <content type="html"><![CDATA[<p>又是一年过去，忽然接到通知，要求更新一个之前做的展示系统，就想起来要更新一下系统。结果使用 <code>yum list kernel.x86_64</code> 提示 <code>Cannot find a valid baseurl for repo: base</code>。</p><p>更换国内源也不行，看了<code>http://mirrors.163.com/centos/6.10/readme</code> 文件，发现官方自 2020/11/30 起就禁止 CentOS 6.x 更新了（文件被清空）。呜呜，真是后知后觉了！</p><pre><code class="sh">sucd /etc/yum.repos.d/cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.original    # 系统是根据 Base*.repo 来判别基础源的，因此备份的时候必须修改扩展名gedit CentOS-Base.repo    # 国外 http://vault.centos.org/6.10    # 国内 http://mirrors.aliyun.com/centos-vault/6.10/；mv epel.repo epel.originalgedit epel.repo     # 网址替换为 http://archives.fedoraproject.org/pub/archive/epel/6/x86_64/ 即可    # 国内（好像不行了） http://mirrors.aliyun.com/epel-archive/6/rm -f /var/run/yum.pidyum clean allyum makecacheyum repolist</code></pre><p>网友多喜欢用 vim ，我是普通人，我就是喜欢使用 gedit ，用上边提到的网址将文件中的网址替换一下就搞定了；如果可能需要滚动升级到下一个版本的，请参考修改一下网址的表达方式就行了。</p><p>你问我怎么更换国内源，方法和上边是一样的——都是更换源嘛！至于国内源有哪些，可以了解一下清华、阿里云、网易、搜狐、中科大等源。当然，如果想简单一点的话，还可以</p><pre><code class="bash">su# 备份mv /etc/yum.repos.d/CentOS-Base.repo/etc/yum.repos.d/CentOS-Base.repo.bck# 下载替换源（依次为网易、阿里、中科大、搜狐）wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.help/CentOS7-Base-163.repo# wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo# curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo# wget -O /etc/yum.repos.d/CentOS-Base.repo http://centos.ustc.edu.cn/CentOS-Base.repo# wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.sohu.com/help/CentOS-Base-sohu.repo# 更新系统源数据库yum clean allyum makecacheyum repolist</code></pre><p>当然，也可以用这种方法：</p><pre><code class="sh">sused -e &#39;s|^mirrorlist=|#mirrorlist=|g&#39; \         -e &#39;s|^#baseurl=http://mirror.centos.org|baseurl=https://mirrors.tuna.tsinghua.edu.cn|g&#39; \         -i.bak \         /etc/yum.repos.d/CentOS-*.repo</code></pre><p>国内源是真的快，不用真的不知道！</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><p>清华大学TUNA团队.<code>CentOS 镜像使用帮助</code>[EB/OL].<a href="https://mirrors.cnnic.cn/help/centos/">https://mirrors.cnnic.cn/help/centos/</a>, 2021/02/01.</p></li><li><p>fogwu.<code>centos6 yum源失效，yum不可用处理方法及php环境搭建</code>[EB/OL].<a href="https://www.cnblogs.com/fogwang/p/14133970.html">https://www.cnblogs.com/fogwang/p/14133970.html</a>, 2021/02/01.</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;又是一年过去，忽然接到通知，要求更新一个之前做的展示系统，就想起来要更新一下系统。结果使用 &lt;code&gt;yum list kernel.x86_64&lt;/code&gt; 提示 &lt;code&gt;Cannot find a valid baseurl for repo: base&lt;/co
      
    
    </summary>
    
    
      <category term="电脑爱好者" scheme="https://faradays-studio.gitee.io/categories/%E7%94%B5%E8%84%91%E7%88%B1%E5%A5%BD%E8%80%85/"/>
    
    
      <category term="yum" scheme="https://faradays-studio.gitee.io/tags/yum/"/>
    
      <category term="国内源" scheme="https://faradays-studio.gitee.io/tags/%E5%9B%BD%E5%86%85%E6%BA%90/"/>
    
      <category term="CentOS" scheme="https://faradays-studio.gitee.io/tags/CentOS/"/>
    
      <category term="加速" scheme="https://faradays-studio.gitee.io/tags/%E5%8A%A0%E9%80%9F/"/>
    
      <category term="下载" scheme="https://faradays-studio.gitee.io/tags/%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Python 使用 pip 国内源实现百倍加速下载</title>
    <link href="https://faradays-studio.gitee.io/202101171117/"/>
    <id>https://faradays-studio.gitee.io/202101171117/</id>
    <published>2021-01-17T03:17:53.000Z</published>
    <updated>2021-02-14T13:22:21.581Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>pip 是一个现代的，通用的 Python 包管理工具。提供了对 Python 包的查找、下载、安装、卸载的功能。</p></blockquote><p>使用 Python 多年了，一直都坚持使用官方源的做法，结果被现实打脸了，下载一个包往往一个小时都不一定能够成功，不得不放弃了使用 Python 的念头。后来，偶尔知道了 pip 有国内源，大大加快了组件的下载速度，必须严重推荐。</p><p>听说曾经有以下这些国内源——</p><blockquote><p>清华  <a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a><br>阿里  <a href="https://mirrors.aliyun.com/pypi/simple/">https://mirrors.aliyun.com/pypi/simple/</a><br>豆瓣  <a href="https://pypi.doubanio.com/simple/">https://pypi.doubanio.com/simple/</a><br>中科大    <a href="https://mirrors.ustc.edu.cn/pypi/web/simple/">https://mirrors.ustc.edu.cn/pypi/web/simple/</a><br>官网  <a href="https://pypi.org/simple">https://pypi.org/simple</a><br>华中理工  <a href="http://pypi.hustunique.com/">http://pypi.hustunique.com/</a><br>山东理工  <a href="http://pypi.sdutlinux.org/">http://pypi.sdutlinux.org/</a></p></blockquote><p>2021年了，一些国内源已经不运营了，我也不习惯照抄网上的文章，所以这里是我的实践结果。</p><h2 id="国内源的测评"><a href="#国内源的测评" class="headerlink" title="国内源的测评"></a>国内源的测评</h2><table><thead><tr><th>源</th><th>地址</th><th>测试</th><th>速度</th></tr></thead><tbody><tr><td>清华大学</td><td><a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></td><td>ping pypi.tuna.tsinghua.edu.cn</td><td>62ms</td></tr><tr><td>阿里云</td><td><a href="https://mirrors.aliyun.com/pypi/simple/">https://mirrors.aliyun.com/pypi/simple/</a></td><td>ping mirrors.aliyun.com</td><td>8ms</td></tr><tr><td>豆瓣</td><td><a href="https://pypi.douban.com/simple/">https://pypi.douban.com/simple/</a></td><td>ping pypi.douban.com</td><td>52ms</td></tr></tbody></table><p>综上，推荐选择阿里云，不是网友清一色的推荐清华大学源和豆瓣源。</p><h2 id="临时源配置"><a href="#临时源配置" class="headerlink" title="临时源配置"></a>临时源配置</h2><ol><li><p>普通环境下操作示例：</p><pre><code class="cmd"> pipenv install &lt;package&gt;           -i &lt;URL&gt; pip install Django          -i https://pypi.doubanio.com/simple/</code></pre></li><li><p>虚拟环境下的操作示例</p><pre><code class="doc"> pipenv install &lt;package&gt;           --pypi-mirror &lt;URL&gt; pip install Django          --pypi-mirror https://mirrors.aliyun.com/pypi/simple/</code></pre></li></ol><h2 id="永久源配置"><a href="#永久源配置" class="headerlink" title="永久源配置"></a>永久源配置</h2><ol><li><p>Windows 平台：在 <code>%HOMEPATH%</code> 路径下创建 <strong>pip</strong> 文件夹，再创建 <code>pip.ini</code> 文件，内容如下：</p><pre><code class="ini"> [global] timeout = 6000 index-url = https://mirrors.aliyun.com/pypi/simple/ ;清华大学：https://pypi.tuna.tsinghua.edu.cn/simple ;阿里云：https://mirrors.aliyun.com/pypi/simple/ ;豆瓣：https://pypi.douban.com/simple/ [install] ;use-mirrors = true ;mirrors = https://pypi.tuna.tsinghua.edu.cn/simple trusted-host = https://mirrors.aliyun.com</code></pre></li><li><p>Linux 平台：在 <code>~/.pip/pip.conf</code> 文件中增加上述内容。</p></li><li><p>pipenv 等虚拟环境，只需要在相应的 <code>Pipfile</code> 中修改相应的 URL 内容即可，举例如下：</p><pre><code class="ini"> [[source]] name = &quot;pypi&quot; #修改源提高锁定速度 url = &quot;https://mirrors.aliyun.com/pypi/simple&quot; [[source]] name = &quot;aliyun&quot; url = &quot;https://mirrors.aliyun.com/pypi/simple&quot; verify_ssl = true</code></pre></li></ol><p>测试下载 <code>pip install pandas</code> 速度从 12kb/s 提升到 3Mb/s，妥妥地提升百倍以上速度不是梦！</p><p>致敬阿里云、清华大学、豆瓣这些为开源共享力量的单位！</p><blockquote><p>上述内容，有些是三四年前梳理的，早忘了是参考了哪些文章了，有空再找找，然后补上来。<br>不过尴尬的是，天下文章一大抄，多数人都是乱写一通，不成体系，不辨真伪，实在是不堪入目！</p></blockquote><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>PyPA.<code>Installing Packages</code>[EB/OL].<a href="https://packaging.python.org/tutorials/installing-packages/">https://packaging.python.org/tutorials/installing-packages/</a>, 2021/01/17.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;pip 是一个现代的，通用的 Python 包管理工具。提供了对 Python 包的查找、下载、安装、卸载的功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用 Python 多年了，一直都坚持使用官方源的做法，结果被现实打脸了，下载一个包往往一
      
    
    </summary>
    
    
      <category term="编程笔记" scheme="https://faradays-studio.gitee.io/categories/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="国内源" scheme="https://faradays-studio.gitee.io/tags/%E5%9B%BD%E5%86%85%E6%BA%90/"/>
    
      <category term="加速" scheme="https://faradays-studio.gitee.io/tags/%E5%8A%A0%E9%80%9F/"/>
    
      <category term="下载" scheme="https://faradays-studio.gitee.io/tags/%E4%B8%8B%E8%BD%BD/"/>
    
      <category term="pip" scheme="https://faradays-studio.gitee.io/tags/pip/"/>
    
      <category term="Python" scheme="https://faradays-studio.gitee.io/tags/Python/"/>
    
  </entry>
  
</feed>

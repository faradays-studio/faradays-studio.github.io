<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>How to creat svg document with svg.js</title>
    <url>/201902080900/</url>
    <content><![CDATA[<p>A  few days ago, I got stuck in the mud of creating a svg dom with svg.js. After many test and searching, I found out that someting is different from the official  manual.</p>
<h2 id="The-problem-of-using-svg-js"><a href="#The-problem-of-using-svg-js" class="headerlink" title="The problem of using svg.js"></a>The problem of using svg.js</h2><p><strong>For example, we write some dom in <some_page>.html like this:</strong></p>
<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Creating SVG with SVG.js&lt;/title&gt;
&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;
&lt;script src=&quot;https://cdn.bootcss.com/svg.js/3.0.11/svg.min.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;div id=&quot;drawing&quot;&gt;&lt;/div&gt;
&lt;script&gt;
  // write down your javascript here..
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>The official  manual (refer to <a href="https://svgjs.com/docs/3.0/getting-started/" target="_blank" rel="noopener">https://svgjs.com/docs/3.0/getting-started/</a>) said that <code>&lt;script&gt;...&lt;/script&gt;</code>  part like this:</p>
<pre><code class="javascript">var draw = SVG(&#39;drawing&#39;).size(300, 300)
var rect = draw.rect(100, 100).attr({ fill: &#39;#f06&#39; })</code></pre>
<p>The script above pass through on jsfiddle.net test (refer to <a href="https://jsfiddle.net/wout/wmtt8rkz/7/?utm_source=website&amp;utm_medium=embed&amp;utm_campaign=wmtt8rkz" target="_blank" rel="noopener">https://jsfiddle.net/wout/wmtt8rkz/7/?utm_source=website&amp;utm_medium=embed&amp;utm_campaign=wmtt8rkz</a> ). However, it doesn’t work on my case, no matter running on my MSIE 7.0 to 11.0 or Chrome 58. I felt so depressed that even could not got sleep for two whole days.</p>
<h2 id="The-way-to-write-svg-js-script-and-DOM"><a href="#The-way-to-write-svg-js-script-and-DOM" class="headerlink" title="The way to write svg.js script and DOM"></a>The way to write svg.js script and DOM</h2><p>After many tests and searching, I found out that these code running: </p>
<h3 id="1-Way-1"><a href="#1-Way-1" class="headerlink" title="1. Way 1:"></a>1. Way 1:</h3><p>   DOM: <code>&lt;div id=&quot;drawing&quot;&gt;&lt;/div&gt;</code> </p>
<p>   Script 1: <code>var draw = SVG().addTo(&#39;#drawing&#39;).size(1024,200);</code> </p>
<p>   or </p>
<p>   Script 2: <code>var draw = SVG().addTo(&#39;#drawing&#39;).size(&#39;100%&#39;, &#39;100%&#39;);</code></p>
<h3 id="2-Way-2"><a href="#2-Way-2" class="headerlink" title="2. Way 2:"></a>2. Way 2:</h3><p>   DOM: <code>&lt;div class=&quot;drawing&quot;&gt;&lt;/div&gt;</code></p>
<p>   Script 1: <code>var draw = SVG().addTo(&#39;.drawing&#39;).size(1024,200);</code> </p>
<p>   or </p>
<p>   Script 2: <code>var draw = SVG().addTo(&#39;.drawing&#39;).size(&#39;100%&#39;, &#39;100%&#39;);</code></p>
<h3 id="3-Way-3"><a href="#3-Way-3" class="headerlink" title="3. Way 3: "></a>3. Way 3: <br/></h3><p>   DOM: <code>&lt;svg id=&quot;drawing&quot;&gt;&lt;/svg&gt;</code> </p>
<p>   Script 1: <code>var draw = SVG(&#39;#drawing&#39;).size(1024, 200);</code></p>
<p>   or</p>
<p>   Script 2: <code>var draw = SVG(&#39;#drawing&#39;).size(&#39;100%&#39;, &#39;100%&#39;);</code></p>
<p>Done!</p>
]]></content>
      <categories>
        <category>English</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>SVG</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用 svg.js 创建 svg 文档</title>
    <url>/201902090951/</url>
    <content><![CDATA[<p>前段时间，我尝试了使用 svg.js 来创建 svg dom 文档时，并没有成功。经过反复多次的尝试，并网络检索了一些信息，初步确认为官方文档未及时更新，导致了编码错误。</p>
<h2 id="使用-svg-js-遇到的问题"><a href="#使用-svg-js-遇到的问题" class="headerlink" title="使用 svg.js 遇到的问题"></a>使用 svg.js 遇到的问题</h2><p><strong>举个例子，dom 文档 <some_page>.html 的结构如下：</strong></p>
<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Creating SVG with SVG.js&lt;/title&gt;
&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;
&lt;script src=&quot;https://cdn.bootcss.com/svg.js/3.0.11/svg.min.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;div id=&quot;drawing&quot;&gt;&lt;/div&gt;
&lt;script&gt;
  // write down your javascript here..
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>官方文档（见 <a href="https://svgjs.com/docs/3.0/getting-started/" target="_blank" rel="noopener">https://svgjs.com/docs/3.0/getting-started/</a> ）对于 JavaScript 脚本环节的部分 <code>&lt;script&gt;...&lt;/script&gt;</code> 是这样写的：</p>
<pre><code class="javascript">var draw = SVG(&#39;drawing&#39;).size(300, 300)
var rect = draw.rect(100, 100).attr({ fill: &#39;#f06&#39; })</code></pre>
<p>上述脚本在 jsfiddle.net 网站中测试是无异常的，详见 <a href="https://jsfiddle.net/wout/wmtt8rkz/7/?utm_source=website&amp;utm_medium=embed&amp;utm_campaign=wmtt8rkz" target="_blank" rel="noopener">https://jsfiddle.net/wout/wmtt8rkz/7/?utm_source=website&amp;utm_medium=embed&amp;utm_campaign=wmtt8rkz</a> 。然而，无论我是在 IE 7.0 至 11.0，还是在 Chrome 58 内核的浏览器中，我的本地测试从未成功。因此，整整 2 天里，我都未能从试验的阴影中恢复过来，反反复复进行了无数次试验，均无果而终。</p>
<h2 id="使用-svg-js-书写脚本和-DOM-的方法"><a href="#使用-svg-js-书写脚本和-DOM-的方法" class="headerlink" title="使用 svg.js 书写脚本和 DOM 的方法"></a>使用 svg.js 书写脚本和 DOM 的方法</h2><p>在无数次的一边尝试、一边网络搜索的过程中，我发现了以下可行的方法：</p>
<h3 id="1-方法-1"><a href="#1-方法-1" class="headerlink" title="1. 方法 1"></a>1. 方法 1</h3><p>   DOM 文档： <code>&lt;div id=&quot;drawing&quot;&gt;&lt;/div&gt;</code> </p>
<p>   脚本 1： <code>var draw = SVG().addTo(&#39;#drawing&#39;).size(1024,200);</code> </p>
<p>   或采取以下脚本： </p>
<p>   脚本 2： <code>var draw = SVG().addTo(&#39;#drawing&#39;).size(&#39;100%&#39;, &#39;100%&#39;);</code></p>
<h3 id="2-方法-2"><a href="#2-方法-2" class="headerlink" title="2. 方法 2"></a>2. 方法 2</h3><p>   DOM 文档： <code>&lt;div class=&quot;drawing&quot;&gt;&lt;/div&gt;</code></p>
<p>   脚本 1： <code>var draw = SVG().addTo(&#39;.drawing&#39;).size(1024,200);</code> </p>
<p>   或采取以下脚本： </p>
<p>   脚本 2： <code>var draw = SVG().addTo(&#39;.drawing&#39;).size(&#39;100%&#39;, &#39;100%&#39;);</code></p>
<h3 id="3-方法-3"><a href="#3-方法-3" class="headerlink" title="3. 方法 3"></a>3. 方法 3</h3><p>   DOM 文档： <code>&lt;svg id=&quot;drawing&quot;&gt;&lt;/svg&gt;</code> </p>
<p>   脚本 1： <code>var draw = SVG(&#39;#drawing&#39;).size(1024, 200);</code></p>
<p>   或采取以下脚本：</p>
<p>   脚本 2： <code>var draw = SVG(&#39;#drawing&#39;).size(&#39;100%&#39;, &#39;100%&#39;);</code></p>
<p>收工完事！</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>SVG</tag>
      </tags>
  </entry>
  <entry>
    <title>网站框架更新概要</title>
    <url>/202006071600/</url>
    <content><![CDATA[<h2 id="TO-DO"><a href="#TO-DO" class="headerlink" title="TO-DO"></a>TO-DO</h2><ol>
<li><p><del>配置评论系统，实现文章留言；</del>；</p>
</li>
<li><p><del>解决链接跳转错误问题（累经数月间歇性反复测试，初步认为为编译时不支持 <strong>?</strong> 符号的使用）；</del></p>
</li>
<li><p>Markdown 文件添加脚本引用，并添加计数功能。</p>
</li>
</ol>
<h2 id="系统更新日志"><a href="#系统更新日志" class="headerlink" title="系统更新日志"></a>系统更新日志</h2><ol>
<li><p>2020/04/19 16:02:08，创建《更新日志》；</p>
</li>
<li><p>2020/04/19 21:47:44，整合原有静态网站，并入站点中跳转。</p>
</li>
<li><p>2020/04/22 0:54:40，修改 URL 设置，修改《如何使用 svg.js 创建 svg 文档》文章内容为中文。</p>
</li>
<li><p>2020/04/22 21:50:16，参考网友方法，纠正网页点击时变成了下载的 Bug，主要原因是 permalink 末尾没有添加 <code>/</code>符号，最终修改为 <code>permalink: :lang/:title/</code> 。</p>
</li>
<li><p>2020/04/25 22:56:19，修改 post 模板增加封面默认页。</p>
</li>
<li><p>2020/07/19 21:02:13，投入了大量的时间研究主题的定制，初步决定个性化修改后的主题名为 <strong>Faradays</strong> 。</p>
</li>
<li><p>2020/08/07 00:01:17，修改 Faradays 主题，调整文章页打赏、分享、目录导航、作者等内容布局样式。</p>
</li>
<li><p>2020/08/18 22:23:18，博客升级至 v0.1.3，主题增加时间轴、全站字数统计等功能，完成原创字段、图标等一系列更新。</p>
</li>
<li><p>2020/08/23 01:18:51，增加 gitalk评论、代码高亮、文章序号等功能，并调整原创显示样式、URL格式（去除语言字段）等。</p>
</li>
<li><p>2020/08/25 23:03:26，升级至 v0.1.5，开展独立页功能测试，增加多作者署名、文章页QQ联系博主、增加about页等功能，并调整了首页元素的 hover 样式、版权声明等内容。</p>
</li>
</ol>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol>
<li><p>猴子请来的救兵.<code>Hexo主题开发</code>[EB/OL].<a href="https://www.cnblogs.com/yyhh/p/11058985.html" target="_blank" rel="noopener">https://www.cnblogs.com/yyhh/p/11058985.html</a>, 2020/07/19.</p>
<blockquote>
<p>文章介绍的主题开发的内容，对于定制 Faradays 主题起了最初的启发意义。</p>
</blockquote>
</li>
<li><p>梅卫平.<code>Hexo博客实现首页和子页面不同layout布局</code>[EB/OL].<a href="https://my.oschina.net/u/3372900/blog/911534" target="_blank" rel="noopener">https://my.oschina.net/u/3372900/blog/911534</a>, 2020/07/19.</p>
</li>
<li><p>MinHow.<code>MiHo-主题安装和配置详情</code>[EB/OL].<a href="https://blog.minhow.com/articles/blog/installation-configuration/" target="_blank" rel="noopener">https://blog.minhow.com/articles/blog/installation-configuration/</a>, 2020/07/19.</p>
<blockquote>
<p>网站主题基于 MiHo 修改，揉入了 Ayer、3-hexo 等主题的特色。在此，特别提出感谢！</p>
</blockquote>
</li>
<li><p>沈宇.<code>Ayer中文说明</code>[EB/OL].<a href="https://shen-yu.gitee.io/2019/ayer/" target="_blank" rel="noopener">https://shen-yu.gitee.io/2019/ayer/</a>, 2020/07/19.</p>
<blockquote>
<p>网站主题参考了部分 Ayer 的设计思路。</p>
</blockquote>
</li>
<li><p>MOxFIVE.<code>Yelee —— 简而不减 Hexo 双栏博客主题</code>[EB/OL].<a href="http://moxfive.xyz/yelee/" target="_blank" rel="noopener">http://moxfive.xyz/yelee/</a>, 2020/08/22.</p>
</li>
<li><p>Tom-shushu.<code>一款超好用的第三方评论插件--GITALK</code>[EB/OL].<a href="https://www.cnblogs.com/Tom-shushu/p/10970526.html" target="_blank" rel="noopener">https://www.cnblogs.com/Tom-shushu/p/10970526.html</a>, 2020/08/22.</p>
</li>
<li><p>Tommy Chen, HEXO官方文档.<code>hexo 变量</code>[EB/OL].<a href="https://hexo.io/zh-cn/docs/variables.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/variables.html</a>, 2020/08/22.</p>
</li>
<li><p>Tommy Chen, HEXO官方文档.<code>hexo 辅助函数（Helpers）</code>[EB/OL].<a href="https://hexo.io/zh-cn/docs/helpers" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/helpers</a>, 2020/08/22.</p>
</li>
<li><p>菜鸟教程.<code>Font Awesome 参考手册</code>[EB/OL].<a href="https://www.runoob.com/font-awesome/fontawesome-reference.html" target="_blank" rel="noopener">https://www.runoob.com/font-awesome/fontawesome-reference.html</a>, 2020/08/23.</p>
</li>
<li><p>杨玉杰.<code>Hexo 主题 3-hexo</code>[EB/OL].<a href="https://yelog.org/2017/03/07/3-hexo/" target="_blank" rel="noopener">https://yelog.org/2017/03/07/3-hexo/</a>, 2020/08/23.</p>
</li>
<li><p>动力节点.<code>CSS八种让人眼前一亮的HOVER效果</code>[EB/OL].<a href="https://zhuanlan.zhihu.com/p/188620420" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/188620420</a>, 2020/08/23.</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Faradays&#39; Studio</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World（世界，你好）</title>
    <url>/202008090000/</url>
    <content><![CDATA[<p>追求卓越！</p>
]]></content>
      <categories>
        <category>Faradays&#39; Studio</category>
      </categories>
  </entry>
  <entry>
    <title>Windows 批处理的字符运算</title>
    <url>/202008200927/</url>
    <content><![CDATA[<p>字符运算历来是编程中的重要内容，如何拼接字符，如何截取字符，如何判断字符是否存在，如何判断两个字符串是否相同，成为了编程任务中的重要环节。因此，我结合网络的资料和个人的实践经验来总结一下。</p>
<h2 id="Windows-批处理中字符的基本常识"><a href="#Windows-批处理中字符的基本常识" class="headerlink" title="Windows 批处理中字符的基本常识"></a>Windows 批处理中字符的基本常识</h2><ol>
<li><p>批处理中变量的赋值符号两侧不能包含空格，如 <code>set str_date=&#39;20200820&#39;</code>，这与很多编程规范是相悖的。</p>
</li>
<li><p>批处理中的字符可以不添加双引号，但是如果包含空格的话，必须使用引号，，如 <code>set str_name=&quot;20200820 Windows 批处理的字符运算经验总结&quot;</code>。</p>
</li>
<li><p>自定义变量使用 % 来包围来进行引用，即 <code>%变量%</code> ；而 Windows 内置变量（含文件路径变量扩展）则使用 % 符号来引导，即 <code>%内置变量</code> 。</p>
</li>
</ol>
<h2 id="截取字符串"><a href="#截取字符串" class="headerlink" title="截取字符串"></a>截取字符串</h2><h3 id="一般性的字符截取"><a href="#一般性的字符截取" class="headerlink" title="一般性的字符截取"></a>一般性的字符截取</h3><ol>
<li>基本语法： <code>%**变量名**:~**起点位置**,**截取数量|终点位置**%</code></li>
</ol>
<p><strong>起点位置</strong> ：如果为正数，那么就是从左往右截取，而如果为负数，那么就是说从右向左截取；不过无论为正还是为负，截取结果都是不包含处于 <strong>起点位置</strong> 的那个字符的。</p>
<p><strong>截取数量|终点位置</strong> ：如果为正数，那么就是单纯的 <strong>截取数量</strong> ；如果为负数，那么应当表述为 <strong>终点位置</strong> ，而且，与 <strong>起点位置</strong> 对应，截取结果也是不包含该负数所对应的字符的，即上述的 -5 对应的是终点位置为右侧第 6 个字符截止。</p>
<p>举例说明，如下：</p>
<pre><code class="powershell">echo on
set ifo=abcdefghijklmnopqrstuvwxyz0123456789
echo %ifo%
echo.
echo 截取前4个字符：%ifo:~0,4%
echo 截取年度：%date:~0,4%
echo.
echo 截取最后2个字符：%ifo:~-2%
echo 截取星期：%date:~-2%
echo.
echo 截取第一个到倒数第6个字符：%ifo:~0,-5%
echo 截取日期（含分隔符）：%date:~0,-3%
echo.
echo 从第5个字符开始，截取2个字符：%ifo:~4,2%
echo 截取月份：%date:~5,2%
echo 截取天数：%date:~8,2%
echo.
echo 从倒数第14个字符开始，截取5个字符：%ifo:~-14,5%
echo 截取秒数：%time:~3,2%
echo.
echo 当前时间是：%time% 即 %time:~0,2%点%time:~3,2%分%time:~6,2%秒%time:~9,2%厘秒
pause</code></pre>
<p>当然，我最常用的就是对日期、时间等内置变量的操作。</p>
<h3 id="文件路径字符的截取"><a href="#文件路径字符的截取" class="headerlink" title="文件路径字符的截取"></a>文件路径字符的截取</h3><p>主要依靠 Windows 内置的扩展变量用法来进行。</p>
<p>执行 <code>for /?</code> 可以查看路径扩展的</p>
<p>举例说明，如下（注意，需要另存为 test.bat 文件形式执行）：</p>
<pre><code class="powershell">@echo off
echo 当前路径的完整字符串：%0
echo 当前路径的完整字符串（如被双引号包围，去除双引号）：%~0
echo 当前路径的所在分区：%~d0
echo 当前路径的目录：%~p0
echo 文件名：%~n0
echo 扩展名：%~x0
echo 文件属性：%~a0
echo 修改时间：%~t0
echo 文件大小：%~z0
pause</code></pre>
<p>路径处理，往往都配合 for 函数进行操作。</p>
<h2 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h2><h3 id="变更日志"><a href="#变更日志" class="headerlink" title="变更日志"></a>变更日志</h3><ol>
<li>2020/08/20 10:49:23，初始版本。</li>
</ol>
<h3 id="参考索引"><a href="#参考索引" class="headerlink" title="参考索引"></a>参考索引</h3><ol>
<li><strong>CharyGao</strong>.<code>DOS命令（cmd）批处理：替换字符串、截取字符串、扩充字符串、获取字符串长度</code>[EB/OL].<a href="https://www.cnblogs.com/Chary/p/No0000A4.html" target="_blank" rel="noopener">https://www.cnblogs.com/Chary/p/No0000A4.html</a>, 2020/08/20.</li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>批处理</tag>
        <tag>字符运算</tag>
      </tags>
  </entry>
</search>
